{"version":3,"sources":["logo.png","logo-navbar.svg","api/apiClient.tsx","store/organizationContext/actions.tsx","api/organizations.tsx","store/organizationContext/reducer.tsx","store/organizationContext/selectors.tsx","SmartComponents/RouterOrganizationContextLoader/OrganizationContextLoader.tsx","SmartComponents/RouterOrganizationContextLoader/index.tsx","SmartComponents/OrganizationList/OrganizationListPage.tsx","store/alert/actions.tsx","store/organizationList/actions.tsx","store/organizationList/reducer.tsx","store/organizationList/selectors.tsx","store/deleteDialog/actions.ts","store/deleteDialog/reducer.ts","store/deleteDialog/selectors.ts","store/organization/actions.tsx","store/organization/reducer.tsx","store/organization/selectors.tsx","SmartComponents/OrganizationList/index.tsx","PresentationalComponents/PageOrganizationList/PageOrganizationList.tsx","SmartComponents/OrganizationForm/OrganizationForm.tsx","SmartComponents/OrganizationForm/index.tsx","SmartComponents/OrganizationEditModal/OrganizationEditModal.tsx","SmartComponents/OrganizationEditModal/index.tsx","PresentationalComponents/PageOrganizationEdit/PageOrganizationEdit.tsx","SmartComponents/OrganizationContextSelector/OrganizationContextSelector.tsx","SmartComponents/OrganizationContextSelector/index.tsx","PresentationalComponents/KeysPageTabs/index.tsx","PresentationalComponents/KeysPageTabs/KeysPageTabs.tsx","SmartComponents/KeysActive/KeysActive.tsx","store/organizationKeys/actions.tsx","store/organizationKeys/reducer.tsx","store/organizationKeys/selectors.tsx","store/organizationComponents/actions.tsx","store/organizationComponents/reducer.tsx","store/organizationComponents/selectors.tsx","SmartComponents/KeysActive/index.tsx","PresentationalComponents/PageOrganizationKeys/PageActiveKey/PageActiveKey.tsx","SmartComponents/KeyList/KeyList.tsx","SmartComponents/KeyList/index.tsx","PresentationalComponents/PageOrganizationKeys/PageListKeys/PageListKeys.tsx","SmartComponents/KeyProviders/KeyProviders.tsx","store/serverInfo/actions.tsx","api/serverInfo.tsx","store/serverInfo/reducer.tsx","store/serverInfo/selectors.tsx","store/organizationComponent/actions.tsx","store/organizationComponent/reducer.tsx","store/organizationComponent/selectors.tsx","SmartComponents/KeyProviders/index.tsx","PresentationalComponents/PageOrganizationKeys/PageKeyProviders/PageKeyProviders.tsx","PresentationalComponents/PropertySwitch/index.tsx","PresentationalComponents/PropertySwitch/PropertySwitch.tsx","PresentationalComponents/PropertySelect/index.tsx","PresentationalComponents/PropertySelect/PropertySelect.tsx","PresentationalComponents/PropertyFile/index.tsx","PresentationalComponents/PropertyFile/PropertyFile.tsx","PresentationalComponents/ProviderForm/index.tsx","PresentationalComponents/ProviderForm/ProviderForm.tsx","SmartComponents/ProviderManagerModal/ProviderManagerModal.tsx","SmartComponents/ProviderManagerModal/index.tsx","SmartComponents/ProviderManager/ProviderManager.tsx","SmartComponents/ProviderManager/index.tsx","PresentationalComponents/PageOrganizationKeys/PageProvider/PageProvider.tsx","PresentationalComponents/PageOrganizationKeys/PageOrganizationKeys.tsx","SmartComponents/RouterOrganizationContextSelector/OrganizationContextLoader.tsx","SmartComponents/RouterOrganizationContextSelector/index.tsx","PresentationalComponents/PageContextOrganization/PageContextOrganization.tsx","PresentationalComponents/IframeComponent/IframeComponent.tsx","PresentationalComponents/PageSwaggerUI/PageSwaggerUI.tsx","Routes.tsx","SmartComponents/DeleteDialog/DeleteDialog.tsx","SmartComponents/DeleteDialog/index.tsx","SmartComponents/SidebarNav/SidebarNav.tsx","SmartComponents/SidebarNav/index.tsx","App.tsx","serviceWorker.ts","store/rootReducer.tsx","api/apiInit.tsx","index.tsx","store/index.tsx"],"names":["module","exports","BackendAPIClient","path","body","method","config","axios","request","Object","assign","url","data","this","fetchOrganizationsRequest","createAction","fetchOrganizationsSuccess","fetchOrganizationsFailure","selectOrganizationContext","fetchOrganizations","dispatch","ApiClient","get","then","res","catch","err","defaultState","selected","organizations","error","status","organizationsState","state","srcs","selectedOrganization","RouterOrganizationContextLoader","renderLoading","PageSection","Bullseye","fetchCtxOrganizations","props","cxtOrganizationsStatus","cxtOrganizationsError","Component","component","rest","render","to","React","mapStateToProps","organizationContextSelectors","mapDispatchToProps","organizationContextActions","connect","OrganizationList","refreshData","a","page","pageSize","filterText","filtersInRowsAndCells","rows","items","map","item","cells","title","id","name","description","type","setState","handleEditar","event","rowIndex","history","push","handleEliminar","showDeleteDialog","closeDeleteDialog","deleteOrganization","organization","onDelete","onCancel","handleSearchSubmit","values","trim","onPageChange","handleOnSetPage","handleOnPageInput","handleOnPerPageSelect","_event","total","totalSize","Math","floor","renderSearchBox","onSubmit","renderPagination","isCompact","Pagination","itemCount","perPage","onPageInput","onSetPage","widgetId","onPerPageSelect","renderTable","fetchStatus","columns","actions","rowSize","onRetry","length","Fragment","Table","aria-label","colSpan","transforms","cellWidth","onClick","Card","CardHeader","Toolbar","className","ToolbarGroup","ToolbarItem","Button","addNotification","require","alert","alertFetchEndpoint","errorDescription","response","variant","message","dismissable","createAsyncAction","fetchOrganizationListRequest","fetchOrganizationListSuccess","success","fetchOrganizationListFailure","failure","params","query","keys","forEach","key","value","undefined","join","searchOrganizations","organizationState","openModal","closeModal","processing","isOpen","isProcessing","isError","deleteDialogState","fetchOrganizationRequest","fetchOrganizationSuccess","fetchOrganizationFailure","createOrganizationRequest","createOrganizationSuccess","createOrganizationFailure","updateOrganizationRequest","updateOrganizationSuccess","updateOrganizationFailure","deleteOrganizationRequest","deleteOrganizationSuccess","deleteOrganizationFailure","fetchOrganizationIdByNameRequest","fetchOrganizationIdByNameSuccess","fetchOrganizationIdByNameFailure","fetchOrganization","organizationId","meta","getOrganizationById","requestCreateOrganization","post","createOrganization","requestUpdateOrganization","put","updateOrganization","delete","removeOrganization","fetchOrganizationIdByName","organizationName","GET_ID_BY_NAME_URL","encodeURIComponent","byId","Map","errors","selectOrganization","selectOrganizationFetchStatus","selectOrganizationError","organizationListSelectors","organizationListActions","organizationActions","deleteDialogActions","withRouter","PageOrganizationList","PageSectionVariants","light","TextContent","Text","OrganizationForm","onChange","validationSchema","yup","shape","required","min","max","test","nullable","useForm","mode","defaultValues","register","getValues","triggerValidation","Form","isValid","FormGroup","label","isRequired","fieldId","helperText","helperTextInvalid","TextInput","aria-describedby","ref","aria-invalid","placeholder","OrganizationEditModal","handleModalSave","organizationFormData","saving","payload","useMasterKeys","handleModalClose","handleOnFormChange","organizationUUID","_prevProps","prevState","random","Modal","isSmall","onClose","isDisabled","ownProps","organizationSelectors","PageOrganizationEdit","match","OrganizationContextSelector","onToggle","onContextSelect","ctxOrganizations","selectCtxOrganization","onSelect","find","p","onSearchInputChange","searchValue","onSearchButtonClick","filtered","filter","org","toLowerCase","indexOf","filteredItems","ctxOrganization","ContextSelector","toggleText","searchInputValue","screenReaderLabel","index","ContextSelectorItem","activeKey","children","style","marginBottom","Tabs","isFilled","eventKey","Tab","KeysActive","loadKeysAndComponents","fetchOrganizationKeys","fetchOrganizationComponents","activeMap","processKeysAndComponents","organizationKeys","organizationComponents","active","i","j","providerId","provider","t","kid","set","buttonLabel","modalTitle","modalContent","publicKey","certificate","parent","fullWidth","ClipboardCopy","handleOnTableCollapse","rowKey","cellFormatters","expandable","size","currentOrganizationId","organizationKeysError","organizationComponentsError","organizationKeysFetchStatus","organizationComponentsFetchStatus","onCollapse","fetchOrganizationKeysRequest","fetchOrganizationKeysSuccess","fetchOrganizationKeysFailure","replace","getOrganizationKeys","keysMetadata","byOrganizationId","organizationKeysState","selectOrganizationKeys","selectOrganizationKeysFetchStatus","selectOrganizationKeysError","fetchOrganizationComponentsRequest","fetchOrganizationComponentsSuccess","fetchOrganizationComponentsFailure","getOrganizationComponents","organizationComponentsState","selectOrganizationComponents","selectOrganizationComponentsFetchStatus","selectOrganizationComponentsError","organizationKeysSelectors","organizationComponentsSelectors","organizationKeysActions","organizationComponentsActions","PageActiveKey","KeyList","providerPriority","PageListKeys","KeyProviders","loadSystemInfoAndComponents","fetchServerInfo","components","getComponentEditUrl","handleDelete","requestDeleteComponent","serverInfoError","serverInfoFetchStatus","rowId","serverInfo","componentTypes","keyProviders","sort","b","localeCompare","icon","fetchServerInfoRequest","fetchServerInfoSuccess","fetchServerInfoFailure","serverInfoState","selectServerInfo","selectServerInfoFetchStatus","selectServerInfoError","fetchComponentRequest","fetchComponentSuccess","fetchComponentFailure","createComponentRequest","createComponentSuccess","createComponentFailure","updateComponentRequest","updateComponentSuccess","updateComponentFailure","deleteComponentRequest","deleteComponentSuccess","deleteComponentFailure","fetchComponent","componentId","getOrganizationComponent","requestCreateComponent","createOrganizationComponent","requestUpdateComponent","updateOrganizationComponent","deleteOrganizationComponent","selectComponent","selectComponentFetchStatus","selectComponentError","serverInfoSelectors","serverInfoActions","componentActions","PageKeyProviders","PropertySwitch","handleChange","isChecked","defaultValue","property","Switch","labelOff","PropertySelect","handleOnToggle","isExpanded","handleOnSelect","isPlaceholder","clearSelection","toString","Select","SelectVariant","single","selections","ariaLabelledBy","direction","SelectDirection","up","options","option","SelectOption","PropertyFile","file","target","files","reader","FileReader","onloadend","result","fileData","readAsText","Split","gutter","SplitItem","InputGroup","display","ProviderForm","schema","properties","typeError","priority","enabled","keySize","setValue","useEffect","isHorizontal","isReadOnly","propertyError","helpText","renderConfigProperty","ProviderManagerModal","getRedirectTo","getOrganizationId","getPayload","formData","configPayload","create","update","componentUUID","isLarge","ProviderManager","getProviderId","getComponentId","getProvider","componentSelectors","componentFetchStatus","componentError","PageProvider","PageOrganizationKeys","exact","RouterOrganizationContextSelector","location","PageContextOrganization","IframeComponent","src","height","width","PageSwaggerUI","origin","window","XmlBuilderRoute","AppRoutes","welcomeMessage","buttonAdministrarServidor","PageForbidden403","PageNotFound404","PageServiceUnavailable503","DeleteDialogBase","ButtonVariant","danger","link","deleteDialogSelectors","SidebarNav","Nav","theme","NavGroup","NavItem","activeClassName","frontendComponentsNotifications","App","NotificationsPortal","version","process","REACT_APP_VERSION","productName","swaggerApiURL","githubIssuesURL","documentationURL","githubSourceCodeURL","sidebarNav","brandImageSrc","navBrandImageSrc","Boolean","hostname","rootReducer","combineReducers","notifications","action","getType","defaults","baseURL","ReactDOM","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.512cdb59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b4f3b1c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-navbar.f314a279.svg\";","import axios, { AxiosPromise } from \"axios\";\n\nclass BackendAPIClient {\n  public static request<T>(\n    path: string,\n    body: any = null,\n    method:\n      | \"get\"\n      | \"post\"\n      | \"put\"\n      | \"delete\"\n      | \"options\"\n      | \"patch\"\n      | undefined = \"get\",\n    config = {}\n  ): AxiosPromise<T> {\n    return axios.request<T>(\n      Object.assign(\n        {},\n        {\n          url: path,\n          method,\n          data: body\n        },\n        config\n      )\n    );\n  }\n\n  public static post<T>(path: string, body: any, config = {}): AxiosPromise<T> {\n    return this.request<T>(path, body, \"post\", config);\n  }\n\n  public static put<T>(path: string, body: any, config = {}): AxiosPromise<T> {\n    return this.request<T>(path, body, \"put\", config);\n  }\n\n  public static get<T>(path: string): AxiosPromise<T> {\n    return this.request<T>(path);\n  }\n\n  public static delete(path: string, config = {}) {\n    return this.request(path, null, \"delete\", config);\n  }\n}\n\nexport default BackendAPIClient;\n","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\nimport { getAllOrganizations } from \"../../api/organizations\";\n\nexport const fetchOrganizationsRequest = createAction(\n  \"organizationContext/organizations/fetch/request\"\n)();\nexport const fetchOrganizationsSuccess = createAction(\n  \"organizationContext/organizations/fetch/success\"\n)<OrganizationRepresentation[]>();\nexport const fetchOrganizationsFailure = createAction(\n  \"organizationContext/organizations/fetch/failure\"\n)<AxiosError>();\n\nexport const selectOrganizationContext = createAction(\n  \"organizationContext/organizations/select\"\n)<OrganizationRepresentation>();\n\nexport const fetchOrganizations = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchOrganizationsRequest());\n\n    return getAllOrganizations()\n      .then((res: AxiosResponse<OrganizationRepresentation[]>) => {\n        dispatch(fetchOrganizationsSuccess(res.data));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchOrganizationsFailure(err));\n      });\n  };\n};\n","import ApiClient from \"./apiClient\";\nimport { AxiosPromise } from \"axios\";\nimport {\n  OrganizationRepresentation,\n  SearchResultsRepresentation,\n  KeysMetadataRepresentation,\n  ComponentRepresentation,\n  DocumentType\n} from \"../models/xml-builder\";\n\nconst ORGANIZATIONS_URL = \"/organizations\";\nconst ORGANIZATIONS_SEARCH_URL = \"/organizations/search\";\nconst ALL_ORGANIZATIONS_URL = \"/organizations/all\";\nconst GET_ID_BY_NAME_URL = \"/organizations/id-by-name\";\nconst GET_ORGANIZATION_KEYS_URL = \"/organizations/{organizationId}/keys\";\nconst ORGANIZATION_COMPONENTS_URL =\n  \"/organizations/{organizationId}/components\";\nconst GET_ORGANIZATION_COMPONENT_URL =\n  \"/organizations/{organizationId}/components/{componentId}\";\nconst ORGANIZATION_ENRICH_DOCUMENTS_URL =\n  \"/organizations/{organizationId}/documents/{documentType}/enrich\";\nconst ORGANIZATION_CREATE_DOCUMENTS_URL =\n  \"/organizations/{organizationId}/documents/{documentType}/create\";\n\nexport const searchOrganizations = (\n  filterText: string,\n  page: number,\n  pageSize: number\n): AxiosPromise<SearchResultsRepresentation<OrganizationRepresentation>> => {\n  const params: any = {\n    filterText,\n    page: page - 1,\n    pageSize: pageSize\n  };\n  const query: string[] = [];\n\n  Object.keys(params).forEach((key: string) => {\n    const value: any = params[key];\n    if (value !== undefined) {\n      query.push(`${key}=${value}`);\n    }\n  });\n\n  return ApiClient.get<SearchResultsRepresentation<OrganizationRepresentation>>(\n    `${ORGANIZATIONS_SEARCH_URL}?${query.join(\"&\")}`\n  );\n};\n\nexport const getAllOrganizations = (): AxiosPromise<OrganizationRepresentation[]> => {\n  return ApiClient.get<OrganizationRepresentation[]>(ALL_ORGANIZATIONS_URL);\n};\n\nexport const createOrganization = (\n  organization: OrganizationRepresentation\n) => {\n  return ApiClient.post<OrganizationRepresentation>(\n    ORGANIZATIONS_URL,\n    organization\n  );\n};\n\nexport const getOrganizationById = (organizationId: string) => {\n  return ApiClient.get<OrganizationRepresentation>(\n    `${ORGANIZATIONS_URL}/${organizationId}`\n  );\n};\n\nexport const updateOrganization = (\n  organizationId: string,\n  organization: OrganizationRepresentation\n) => {\n  return ApiClient.put<OrganizationRepresentation>(\n    `${ORGANIZATIONS_URL}/${organizationId}`,\n    organization\n  );\n};\n\nexport const removeOrganization = (organizationId: string) => {\n  return ApiClient.delete(`${ORGANIZATIONS_URL}/${organizationId}`);\n};\n\nexport const getOrganizationIdByName = (\n  name: string\n): AxiosPromise<string | null> => {\n  return ApiClient.get(GET_ID_BY_NAME_URL + \"/\" + encodeURIComponent(name));\n};\n\nexport const getOrganizationKeys = (\n  organizationId: string\n): AxiosPromise<KeysMetadataRepresentation> => {\n  return ApiClient.get<KeysMetadataRepresentation>(\n    GET_ORGANIZATION_KEYS_URL.replace(\"{organizationId}\", organizationId)\n  );\n};\n\nexport const getOrganizationComponents = (\n  organizationId: string\n): AxiosPromise<ComponentRepresentation[]> => {\n  return ApiClient.get<ComponentRepresentation[]>(\n    ORGANIZATION_COMPONENTS_URL.replace(\"{organizationId}\", organizationId)\n  );\n};\n\nexport const getOrganizationComponent = (\n  organizationId: string,\n  componentId: string\n): AxiosPromise<ComponentRepresentation> => {\n  return ApiClient.get<ComponentRepresentation>(\n    GET_ORGANIZATION_COMPONENT_URL.replace(\n      \"{organizationId}\",\n      organizationId\n    ).replace(\"{componentId}\", componentId)\n  );\n};\n\nexport const createOrganizationComponent = (\n  organizationId: string,\n  component: ComponentRepresentation\n): AxiosPromise<ComponentRepresentation> => {\n  return ApiClient.post<ComponentRepresentation>(\n    ORGANIZATION_COMPONENTS_URL.replace(\"{organizationId}\", organizationId),\n    component\n  );\n};\n\nexport const updateOrganizationComponent = (\n  organizationId: string,\n  component: ComponentRepresentation\n): AxiosPromise<ComponentRepresentation> => {\n  return ApiClient.put<ComponentRepresentation>(\n    GET_ORGANIZATION_COMPONENT_URL.replace(\n      \"{organizationId}\",\n      organizationId\n    ).replace(\"{componentId}\", component.id),\n    component\n  );\n};\n\nexport const deleteOrganizationComponent = (\n  organizationId: string,\n  componentId: string\n): AxiosPromise => {\n  return ApiClient.delete(\n    GET_ORGANIZATION_COMPONENT_URL.replace(\n      \"{organizationId}\",\n      organizationId\n    ).replace(\"{componentId}\", componentId)\n  );\n};\n\nexport const enrichOrganizationDocument = (\n  organizationId: string,\n  documentType: DocumentType,\n  document: any\n): AxiosPromise<any> => {\n  return ApiClient.post<any>(\n    ORGANIZATION_ENRICH_DOCUMENTS_URL.replace(\n      \"{organizationId}\",\n      organizationId\n    ).replace(\"{documentType}\", documentType),\n    document\n  );\n};\n\nexport const createOrganizationDocument = (\n  organizationId: string,\n  documentType: DocumentType,\n  document: any\n): AxiosPromise<any> => {\n  return ApiClient.post<any>(\n    ORGANIZATION_CREATE_DOCUMENTS_URL.replace(\n      \"{organizationId}\",\n      organizationId\n    ).replace(\"{documentType}\", documentType),\n    document\n  );\n};\n","import { AxiosError } from \"axios\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchOrganizationsRequest,\n  fetchOrganizationsSuccess,\n  fetchOrganizationsFailure,\n  selectOrganizationContext\n} from \"./actions\";\n\nexport const stateKey = \"organizationContext\";\n\nexport type OrganizationContextState = Readonly<{\n  selected: OrganizationRepresentation | null;\n  organizations: OrganizationRepresentation[] | null;\n  error: AxiosError<any> | null;\n  status: FetchStatus;\n}>;\n\nexport const defaultState: OrganizationContextState = {\n  selected: null,\n  organizations: null,\n  error: null,\n  status: \"none\"\n};\n\nexport type OrganizationContextAction = ActionType<\n  | typeof fetchOrganizationsRequest\n  | typeof fetchOrganizationsSuccess\n  | typeof fetchOrganizationsFailure\n  | typeof selectOrganizationContext\n>;\n\nexport function organizationContextReducer(\n  state = defaultState,\n  action: OrganizationContextAction\n): OrganizationContextState {\n  switch (action.type) {\n    case getType(fetchOrganizationsRequest):\n      return {\n        ...state,\n        status: \"inProgress\"\n      };\n    case getType(fetchOrganizationsSuccess):\n      return {\n        ...state,\n        status: \"complete\",\n        error: null,\n        organizations: action.payload\n      };\n    case getType(fetchOrganizationsFailure):\n      return {\n        ...state,\n        status: \"complete\",\n        error: action.payload\n      };\n\n    case getType(selectOrganizationContext):\n      return {\n        ...state,\n        selected: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const organizationsState = (state: RootState) => state[stateKey];\n\nexport const organizations = (state: RootState) => {\n  const srcs = organizationsState(state).organizations;\n  if (srcs) {\n    return srcs;\n  }\n  return [];\n};\n\nexport const status = (state: RootState) => organizationsState(state).status;\nexport const error = (state: RootState) => organizationsState(state).error;\n\n//\n\nexport const selectedOrganization = (state: RootState) =>\n  organizationsState(state).selected;\n","import React from \"react\";\nimport { FetchStatus } from \"../../store/common\";\nimport { AxiosError } from \"axios\";\nimport { Bullseye, PageSection } from \"@patternfly/react-core\";\nimport { Redirect, Route, RouteComponentProps } from \"react-router-dom\";\n\ninterface StateToProps {\n  cxtOrganizationsError: AxiosError<any> | null;\n  cxtOrganizationsStatus: FetchStatus | null;\n}\n\ninterface DispatchToProps {\n  fetchCtxOrganizations: () => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n}\n\ninterface State {}\n\nclass RouterOrganizationContextLoader extends React.Component<Props, State> {\n  componentDidMount() {\n    const { fetchCtxOrganizations } = this.props;\n    fetchCtxOrganizations();\n  }\n\n  renderLoading = () => {\n    return (\n      <PageSection>\n        <Bullseye>Loading...</Bullseye>\n      </PageSection>\n    );\n  };\n\n  render() {\n    const {\n      cxtOrganizationsStatus,\n      cxtOrganizationsError,\n      component: Component,\n      ...rest\n    } = this.props;\n\n    if (cxtOrganizationsError) {\n      return <Route {...rest} render={() => <Redirect to=\"/error503\" />} />;\n    }\n\n    switch (cxtOrganizationsStatus) {\n      case \"complete\":\n        return <Route {...rest} component={Component} />;\n      default:\n        return <Route {...rest} render={this.renderLoading} />;\n    }\n  }\n}\n\nexport default RouterOrganizationContextLoader;\n","import { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  organizationContextSelectors,\n  organizationContextActions\n} from \"../../store/organizationContext\";\nimport RouterOrganizationContextLoader from \"./OrganizationContextLoader\";\n\nconst mapStateToProps = createMapStateToProps(state => ({\n  cxtOrganizationsError: organizationContextSelectors.error(state),\n  cxtOrganizationsStatus: organizationContextSelectors.status(state)\n}));\n\nconst mapDispatchToProps = {\n  fetchCtxOrganizations: organizationContextActions.fetchOrganizations\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RouterOrganizationContextLoader);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AxiosError } from \"axios\";\nimport {\n  Button,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Card,\n  CardHeader,\n  Pagination\n} from \"@patternfly/react-core\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  ICell,\n  IRow,\n  cellWidth,\n  IAction\n} from \"@patternfly/react-table\";\nimport {\n  SearchBoxForm,\n  TableSkeleton,\n  TableEmpty,\n  TableError\n} from \"@projectopenubl/xml-builder-react\";\nimport {\n  OrganizationRepresentation,\n  SearchResultsRepresentation\n} from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../../store/common\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\nimport { deleteDialogActions } from \"../../store/deleteDialog\";\n\ninterface StateToProps {\n  organizations: SearchResultsRepresentation<OrganizationRepresentation>;\n  error: AxiosError<any> | null;\n  fetchStatus: FetchStatus;\n}\n\ninterface DispatchToProps {\n  fetchOrganizations: (\n    filterText: string,\n    page: number,\n    pageSize: number\n  ) => Promise<void>;\n  deleteOrganization: (organizationId: string) => Promise<void>;\n  showDeleteDialog: typeof deleteDialogActions.openModal;\n  closeDeleteDialog: typeof deleteDialogActions.closeModal;\n}\n\ninterface Props extends StateToProps, DispatchToProps, XmlBuilderRouterProps {}\n\ninterface State {\n  filterText: string;\n  page: number;\n  pageSize: number;\n  rows: IRow[];\n  columns: ICell[];\n  actions: IAction[];\n}\n\nexport class OrganizationList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      filterText: \"\",\n      page: 1,\n      pageSize: 10,\n      rows: [],\n      columns: [\n        { title: \"Nombre\", transforms: [cellWidth(\"30\")] },\n        { title: \"Descripcion\", transforms: [] },\n        { title: \"Tipo\", transforms: [cellWidth(\"10\")] }\n      ],\n      actions: [\n        {\n          title: \"Editar\",\n          onClick: this.handleEditar\n        },\n        {\n          title: \"Eliminar\",\n          onClick: this.handleEliminar\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  refreshData = async (\n    page: number = this.state.page,\n    pageSize: number = this.state.pageSize,\n    filterText: string = this.state.filterText\n  ) => {\n    const { fetchOrganizations } = this.props;\n\n    await fetchOrganizations(filterText, page, pageSize);\n    this.filtersInRowsAndCells();\n  };\n\n  filtersInRowsAndCells = (\n    data: SearchResultsRepresentation<OrganizationRepresentation> = this.props\n      .organizations\n  ) => {\n    const rows: (IRow | string[])[] = data.items.map(\n      (item: OrganizationRepresentation) => {\n        return {\n          cells: [\n            {\n              title: (\n                <Link to={`/organizations/manage/${item.id}/keys`}>\n                  {item.name}\n                </Link>\n              )\n            },\n            {\n              title: item.description ? (\n                <span>{item.description}</span>\n              ) : (\n                <small>No description</small>\n              )\n            },\n            {\n              title: item.type\n            }\n          ]\n        };\n      }\n    );\n\n    this.setState({ rows });\n  };\n\n  // handlers\n\n  handleEditar = (event: React.MouseEvent, rowIndex: number): void => {\n    const { history, organizations } = this.props;\n    history.push(\n      \"/organizations/manage/\" + organizations.items[rowIndex].id + \"/edit\"\n    );\n  };\n\n  handleEliminar = (event: React.MouseEvent, rowIndex: number) => {\n    const {\n      showDeleteDialog,\n      closeDeleteDialog,\n      deleteOrganization\n    } = this.props;\n\n    const { organizations } = this.props;\n    const organization = organizations.items[rowIndex];\n\n    showDeleteDialog({\n      name: organization.name,\n      type: \"organización\",\n      onDelete: () => {\n        deleteOrganization(organization.id).then(() => {\n          closeDeleteDialog();\n        });\n      },\n      onCancel: () => {\n        closeDeleteDialog();\n      }\n    });\n  };\n\n  handleSearchSubmit = (values: any) => {\n    const page = 1;\n    const { pageSize } = this.state;\n    const filterText: string = values.filterText.trim();\n\n    this.setState({ filterText }, () => {\n      this.refreshData(page, pageSize, filterText);\n    });\n  };\n\n  onPageChange = (event: any, page: number) => {\n    this.setState({ page }, () => {\n      this.refreshData(page);\n    });\n  };\n\n  handleOnSetPage = (event: any, page: number) => {\n    return this.onPageChange(event, page);\n  };\n\n  handleOnPageInput = (event: any, page: number) => {\n    return this.onPageChange(event, page);\n  };\n\n  handleOnPerPageSelect = (_event: any, pageSize: number) => {\n    let page = this.state.page;\n    const total = this.props.organizations.totalSize;\n\n    // If current page and perPage would request data beyond total, show last available page\n    if (page * pageSize > total) {\n      page = Math.floor(total / pageSize) + 1;\n    }\n\n    this.setState({ page, pageSize }, () => {\n      this.refreshData(page, pageSize);\n    });\n  };\n\n  // render\n\n  renderSearchBox = () => {\n    return <SearchBoxForm onSubmit={this.handleSearchSubmit} />;\n  };\n\n  renderPagination = (isCompact: boolean) => {\n    const { page, pageSize } = this.state;\n    const { organizations } = this.props;\n    return (\n      <Pagination\n        itemCount={organizations.totalSize}\n        page={page}\n        perPage={pageSize}\n        onPageInput={this.handleOnPageInput}\n        onSetPage={this.handleOnSetPage}\n        widgetId=\"pagination-options-menu-top\"\n        onPerPageSelect={this.handleOnPerPageSelect}\n        isCompact={isCompact}\n      />\n    );\n  };\n\n  renderTable = () => {\n    const { error, fetchStatus } = this.props;\n    const { columns, rows, actions, pageSize } = this.state;\n\n    if (fetchStatus !== \"complete\") {\n      return <TableSkeleton columns={columns} rowSize={pageSize} />;\n    }\n\n    if (error) {\n      const retry = () => {\n        this.refreshData();\n      };\n      return <TableError columns={columns} onRetry={retry} />;\n    }\n\n    if (rows.length === 0) {\n      return <TableEmpty columns={columns} />;\n    }\n\n    return (\n      <React.Fragment>\n        <Table\n          aria-label=\"Organization List Table\"\n          cells={columns}\n          rows={rows}\n          actions={actions}\n        >\n          <TableHeader />\n          <TableBody />\n          {rows.length > 0 && (\n            <tfoot>\n              <tr>\n                <td colSpan={10}>{this.renderPagination(false)}</td>\n              </tr>\n            </tfoot>\n          )}\n        </Table>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <Toolbar className=\"pf-l-toolbar pf-u-justify-content-space-between pf-u-mx-xl pf-u-my-md\">\n              <ToolbarGroup>\n                <ToolbarItem className=\"pf-u-mr-xl\">\n                  {this.renderSearchBox()}\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Link to=\"/organizations/create\">\n                    <Button aria-label=\"Crear organización\">\n                      Crear organización\n                    </Button>\n                  </Link>\n                </ToolbarItem>\n              </ToolbarGroup>\n              <ToolbarGroup>\n                <ToolbarItem>{this.renderPagination(true)}</ToolbarItem>\n              </ToolbarGroup>\n            </Toolbar>\n          </CardHeader>\n        </Card>\n        {this.renderTable()}\n      </React.Fragment>\n    );\n  }\n}\n","import { Dispatch } from \"redux\";\nimport { AlertModel } from \"../../models/alert\";\nimport { AxiosError } from \"axios\";\n\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\nconst addNotification = frontendComponentsNotifications.addNotification;\n\nexport const alert = (alert: AlertModel) => {\n  return (dispatch: Dispatch) => {\n    dispatch(addNotification(alert));\n  };\n};\n\nexport const alertFetchEndpoint = (err: AxiosError) => {\n  let errorDescription = \"\";\n  if (err.response && err.response.data) {\n    if (typeof err.response.data === \"string\") {\n      errorDescription = err.response.data;\n    } else if (err.response.data.error) {\n      errorDescription = err.response.data.error;\n    }\n  }\n  return (dispatch: Dispatch) => {\n    dispatch(\n      addNotification({\n        variant: \"danger\",\n        title: err.message,\n        description: errorDescription,\n        dismissable: true\n      })\n    );\n  };\n};\n","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { createAsyncAction } from \"typesafe-actions\";\nimport {\n  OrganizationRepresentation,\n  SearchResultsRepresentation\n} from \"../../models/xml-builder\";\nimport { searchOrganizations } from \"../../api/organizations\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\n\nexport const {\n  request: fetchOrganizationListRequest,\n  success: fetchOrganizationListSuccess,\n  failure: fetchOrganizationListFailure\n} = createAsyncAction(\n  \"organizationList/fetch/request\",\n  \"organizationList/fetch/success\",\n  \"organizationList/fetch/failure\"\n)<void, SearchResultsRepresentation<OrganizationRepresentation>, AxiosError>();\n\nexport const fetchOrganizations = (\n  filterText: string,\n  page: number,\n  pageSize: number\n) => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchOrganizationListRequest());\n\n    return searchOrganizations(filterText, page, pageSize)\n      .then((res: AxiosResponse) => {\n        dispatch(fetchOrganizationListSuccess(res.data));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchOrganizationListFailure(err));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n","import { AxiosError } from \"axios\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport {\n  OrganizationRepresentation,\n  SearchResultsRepresentation\n} from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchOrganizationListRequest,\n  fetchOrganizationListSuccess,\n  fetchOrganizationListFailure\n} from \"./actions\";\n\nexport const stateKey = \"organizationList\";\n\nexport type OrganizationListState = Readonly<{\n  organizations: SearchResultsRepresentation<OrganizationRepresentation>;\n  error: AxiosError<any> | null;\n  status: FetchStatus;\n}>;\n\nexport const defaultState: OrganizationListState = {\n  organizations: { items: [], totalSize: 0 },\n  error: null,\n  status: \"none\"\n};\n\nexport type OrganizationListAction = ActionType<\n  | typeof fetchOrganizationListRequest\n  | typeof fetchOrganizationListSuccess\n  | typeof fetchOrganizationListFailure\n>;\n\nexport function organizationListReducer(\n  state = defaultState,\n  action: OrganizationListAction\n): OrganizationListState {\n  switch (action.type) {\n    case getType(fetchOrganizationListRequest):\n      return {\n        ...state,\n        status: \"inProgress\"\n      };\n    case getType(fetchOrganizationListSuccess):\n      return {\n        ...state,\n        status: \"complete\",\n        error: null,\n        organizations: action.payload\n      };\n    case getType(fetchOrganizationListFailure):\n      return {\n        ...state,\n        status: \"complete\",\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const organizationState = (state: RootState) => state[stateKey];\n\nexport const organizations = (state: RootState) => {\n  return organizationState(state).organizations;\n};\n\nexport const status = (state: RootState) => organizationState(state).status;\nexport const error = (state: RootState) => organizationState(state).error;\n","import { AxiosError } from 'axios';\nimport { createAction } from 'typesafe-actions';\n\ninterface Item {\n  name: string;\n  type: string;\n  onDelete: () => void;\n  onCancel: () => void;\n}\n\nexport const openModal = createAction('dialog/delete/open')<Item>();\nexport const closeModal = createAction('dialog/delete/close')<void>();\nexport const processing = createAction('dialog/delete/processing')<void>();\nexport const error = createAction('dialog/delete/error')<AxiosError>();\n","import { ActionType, getType } from 'typesafe-actions';\nimport { closeModal, error, openModal, processing } from './actions';\n\nexport const stateKey = 'deleteDialog';\n\nexport type DeleteDialogState = Readonly<{\n  isOpen: boolean;\n  isProcessing: boolean;\n  isError: boolean;\n  name: string;\n  type: string;\n  onDelete: () => void;\n}>;\n\nexport const defaultState: DeleteDialogState = {\n  isOpen: false,\n  isProcessing: false,\n  isError: false,\n  name: '',\n  type: '',\n  onDelete: () => { },\n};\n\nexport type DeleteDialogAction = ActionType<\n  typeof openModal | typeof closeModal | typeof processing | typeof error\n>;\n\nexport const reducer = (\n  state: DeleteDialogState = defaultState,\n  action: DeleteDialogAction\n): DeleteDialogState => {\n  switch (action.type) {\n    case getType(openModal):\n      return {\n        ...state,\n        ...action.payload,\n        isOpen: true,\n      };\n    case getType(processing):\n      return {\n        ...state,\n        isProcessing: true,\n      };\n    case getType(closeModal):\n      return defaultState;\n    case getType(error):\n      return {\n        ...state,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { RootState } from '../rootReducer';\nimport { stateKey } from './reducer';\n\nexport const deleteDialogState = (state: RootState) => state[stateKey];\n\nexport const isProcessing = (state: RootState) => deleteDialogState(state).isProcessing;\n\nexport const isOpen = (state: RootState) => deleteDialogState(state).isOpen;\n\nexport const isError = (state: RootState) => deleteDialogState(state).isError;\n\nexport const name = (state: RootState) => deleteDialogState(state).name;\n\nexport const type = (state: RootState) => deleteDialogState(state).type;\n\nexport const onDelete = (state: RootState) => deleteDialogState(state).onDelete;\n","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\nimport {\n  getOrganizationById,\n  createOrganization,\n  updateOrganization,\n  getOrganizationIdByName,\n  removeOrganization\n} from \"../../api/organizations\";\nimport { fetchOrganizations } from \"../organizationContext/actions\";\nimport { alert, alertFetchEndpoint } from \"../alert/actions\";\n\ninterface OrganizationActionMeta {\n  organizationId: string;\n}\n\ninterface OrganizationNameActionMeta {\n  organizationName: string;\n}\n\nexport const fetchOrganizationRequest = createAction(\n  \"organization/fetch/request\"\n)<OrganizationActionMeta>();\nexport const fetchOrganizationSuccess = createAction(\n  \"organization/fetch/success\"\n)<OrganizationRepresentation, OrganizationActionMeta>();\nexport const fetchOrganizationFailure = createAction(\n  \"organization/fetch/failure\"\n)<AxiosError, OrganizationActionMeta>();\n\nexport const createOrganizationRequest = createAction(\n  \"organization/create/request\"\n)();\nexport const createOrganizationSuccess = createAction(\n  \"organization/create/success\"\n)<OrganizationRepresentation>();\nexport const createOrganizationFailure = createAction(\n  \"organization/create/failure\"\n)<AxiosError>();\n\nexport const updateOrganizationRequest = createAction(\n  \"organization/update/request\"\n)<OrganizationActionMeta>();\nexport const updateOrganizationSuccess = createAction(\n  \"organization/update/success\"\n)<OrganizationRepresentation, OrganizationActionMeta>();\nexport const updateOrganizationFailure = createAction(\n  \"organization/update/failure\"\n)<AxiosError, OrganizationActionMeta>();\n\nexport const deleteOrganizationRequest = createAction(\n  \"organization/delete/request\"\n)<OrganizationActionMeta>();\nexport const deleteOrganizationSuccess = createAction(\n  \"organization/delete/success\"\n)<OrganizationRepresentation, OrganizationActionMeta>();\nexport const deleteOrganizationFailure = createAction(\n  \"organization/delete/failure\"\n)<AxiosError, OrganizationActionMeta>();\n\nexport const fetchOrganizationIdByNameRequest = createAction(\n  \"organization/fetchIdByName/request\"\n)<OrganizationNameActionMeta>();\nexport const fetchOrganizationIdByNameSuccess = createAction(\n  \"organization/fetchIdByName/success\"\n)<string | null, OrganizationNameActionMeta>();\nexport const fetchOrganizationIdByNameFailure = createAction(\n  \"organization/fetchIdByName/failure\"\n)<AxiosError, OrganizationNameActionMeta>();\n\nexport const fetchOrganization = (organizationId: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: OrganizationActionMeta = {\n      organizationId\n    };\n\n    dispatch(fetchOrganizationRequest(meta));\n\n    return getOrganizationById(organizationId)\n      .then((res: AxiosResponse<OrganizationRepresentation>) => {\n        dispatch(fetchOrganizationSuccess(res.data, meta));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchOrganizationFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n\nexport const requestCreateOrganization = (\n  organization: OrganizationRepresentation\n) => {\n  return (dispatch: Dispatch) => {\n    dispatch(createOrganizationRequest());\n    return createOrganization(organization)\n      .then((res: AxiosResponse<OrganizationRepresentation>) => {\n        dispatch(createOrganizationSuccess(res.data));\n        fetchOrganizations()(dispatch);\n        alert({\n          title: `Creado satisfactoriamente`,\n          description: `Organización ${organization.name} creada`,\n          variant: \"success\"\n        })(dispatch);\n      })\n      .catch((err: AxiosError) => {\n        dispatch(createOrganizationFailure(err));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n\nexport const requestUpdateOrganization = (\n  organizationId: string,\n  organization: OrganizationRepresentation\n) => {\n  return (dispatch: Dispatch) => {\n    const meta: OrganizationActionMeta = {\n      organizationId\n    };\n\n    dispatch(updateOrganizationRequest(meta));\n\n    return updateOrganization(organizationId, organization)\n      .then((res: AxiosResponse<OrganizationRepresentation>) => {\n        dispatch(updateOrganizationSuccess(res.data, meta));\n        fetchOrganizations()(dispatch);\n        alert({\n          title: `Actualizado satisfactoriamente`,\n          description: `Organización ${organization.name} actualizada`,\n          variant: \"success\"\n        })(dispatch);\n      })\n      .catch((err: AxiosError) => {\n        dispatch(updateOrganizationFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n\nexport const deleteOrganization = (organizationId: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: OrganizationActionMeta = {\n      organizationId\n    };\n\n    dispatch(deleteOrganizationRequest(meta));\n\n    return removeOrganization(organizationId)\n      .then((res: AxiosResponse) => {\n        dispatch(deleteOrganizationSuccess(res.data, meta));\n        fetchOrganizations()(dispatch);\n        alert({\n          title: `Eliminado satisfactoriamente`,\n          description: `Organización ${organizationId} eliminada`,\n          variant: \"success\"\n        })(dispatch);\n      })\n      .catch((err: AxiosError) => {\n        dispatch(deleteOrganizationFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n\n//\n\nexport const fetchOrganizationIdByName = (organizationName: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: OrganizationNameActionMeta = {\n      organizationName: organizationName\n    };\n\n    dispatch(fetchOrganizationIdByNameRequest(meta));\n\n    return getOrganizationIdByName(organizationName)\n      .then((res: AxiosResponse<string | null>) => {\n        const data = res.data;\n        dispatch(fetchOrganizationIdByNameSuccess(data, meta));\n        return data;\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchOrganizationIdByNameFailure(err, meta));\n      });\n  };\n};\n","import { AxiosError } from \"axios\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchOrganizationRequest,\n  fetchOrganizationSuccess,\n  fetchOrganizationFailure\n} from \"./actions\";\n\nexport const stateKey = \"organization\";\n\nexport type OrganizationState = Readonly<{\n  byId: Map<string, OrganizationRepresentation>;\n  errors: Map<string, AxiosError | undefined>;\n  fetchStatus: Map<string, FetchStatus>;\n}>;\n\nexport const defaultState: OrganizationState = {\n  byId: new Map(),\n  errors: new Map(),\n  fetchStatus: new Map()\n};\n\nexport type OrganizationAction = ActionType<\n  | typeof fetchOrganizationRequest\n  | typeof fetchOrganizationSuccess\n  | typeof fetchOrganizationFailure\n>;\n\nexport function organizationReducer(\n  state = defaultState,\n  action: OrganizationAction\n): OrganizationState {\n  switch (action.type) {\n    case getType(fetchOrganizationRequest):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.payload.organizationId,\n          \"inProgress\"\n        )\n      };\n    case getType(fetchOrganizationSuccess):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.organizationId,\n          \"complete\"\n        ),\n        byId: new Map(state.byId).set(action.meta.organizationId, {\n          ...action.payload\n        }),\n        errors: new Map(state.errors).set(action.meta.organizationId, undefined)\n      };\n    case getType(fetchOrganizationFailure):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.organizationId,\n          \"complete\"\n        ),\n        errors: new Map(state.errors).set(\n          action.meta.organizationId,\n          action.payload\n        )\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const organizationState = (state: RootState) => state[stateKey];\n\n// Fetch migration project\n\nexport const selectOrganization = (state: RootState, organizationId: string) =>\n  organizationState(state).byId.get(organizationId);\n\nexport const selectOrganizationFetchStatus = (\n  state: RootState,\n  organizationId: string\n) => organizationState(state).fetchStatus.get(organizationId);\n\nexport const selectOrganizationError = (\n  state: RootState,\n  organizationId: string\n) => organizationState(state).errors.get(organizationId);\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { OrganizationList } from \"./OrganizationListPage\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  organizationListSelectors,\n  organizationListActions\n} from \"../../store/organizationList\";\nimport { deleteDialogActions } from \"../../store/deleteDialog\";\nimport { organizationActions } from \"../../store/organization\";\n\nconst mapStateToProps = createMapStateToProps(state => ({\n  organizations: organizationListSelectors.organizations(state),\n  error: organizationListSelectors.error(state),\n  fetchStatus: organizationListSelectors.status(state)\n}));\n\nconst mapDispatchToProps = {\n  fetchOrganizations: organizationListActions.fetchOrganizations,\n  deleteOrganization: organizationActions.deleteOrganization,\n  showDeleteDialog: deleteDialogActions.openModal,\n  closeDeleteDialog: deleteDialogActions.closeModal\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(OrganizationList)\n);\n","import React from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text\n} from \"@patternfly/react-core\";\nimport OrganizationList from \"../../SmartComponents/OrganizationList\";\n\ninterface Props {}\n\ninterface State {}\n\nexport class PageOrganizationList extends React.Component<Props, State> {\n  render() {\n    return (\n      <React.Fragment>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Organizaciones</Text>\n            <Text component=\"small\">\n              Acá podrás administrar las organizaciones del sistema.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <PageSection>\n          <OrganizationList />\n        </PageSection>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Form, FormGroup, TextInput } from \"@patternfly/react-core\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\n\nexport type FormData = {\n  name: string;\n  description: string;\n};\n\ninterface Props {\n  organization: OrganizationRepresentation | undefined;\n  onChange: (isValid: boolean, value: FormData) => void;\n  fetchOrganizationIdByName: (organizationName: string) => any;\n}\n\nconst OrganizationForm: React.FC<Props> = ({\n  organization,\n  onChange,\n  fetchOrganizationIdByName\n}) => {\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .trim()\n      .required(\"Este dato es obligatorio.\")\n      .min(\n        3,\n        \"El nombre de la organización debe de contener al menos 3 caracteres.\"\n      )\n      .max(\n        250,\n        \"El nombre de la organización debe de contener menos de 250 caracteres.\"\n      )\n      .test(\n        \"availableOrganizationName\",\n        \"El nombre de la organización ingresada ya está en uso.\",\n        async value => {\n          return await fetchOrganizationIdByName(value).then(\n            (value: string) => {\n              return !value || (organization && value === organization.id);\n            }\n          );\n        }\n      ),\n    description: yup\n      .string()\n      .nullable()\n      .trim()\n      .max(\n        250,\n        \"La descripción de la organización debe de contener menos de 250 caracteres.\"\n      )\n  });\n\n  const { register, errors, getValues, triggerValidation } = useForm<FormData>({\n    mode: \"onSubmit\",\n    defaultValues: organization\n      ? { name: organization.name, description: organization.description }\n      : undefined,\n    validationSchema\n  });\n\n  // Handlers\n\n  const handleOnFormChange = () => {\n    triggerValidation().then((isValid: boolean) => {\n      onChange(isValid, getValues());\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <Form onSubmit={() => {}} onChange={handleOnFormChange}>\n        <FormGroup\n          label=\"Nombre\"\n          isRequired\n          fieldId=\"name\"\n          helperText=\"Nombre de la organización\"\n          isValid={!errors.name}\n          helperTextInvalid={errors.name && errors.name.message}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n            ref={register}\n            isValid={!errors.name}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Descripción\"\n          fieldId=\"description\"\n          isValid={!errors.description}\n          helperTextInvalid={errors.description && errors.description.message}\n        >\n          <textarea\n            className=\"pf-c-form-control\"\n            aria-invalid=\"false\"\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Breve descripción de la organización.\"\n            ref={register}\n          ></textarea>\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nexport default OrganizationForm;\n","import OrganizationForm from \"./OrganizationForm\";\n\nimport { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport { organizationActions } from \"../../store/organization\";\n\nconst mapStateToProps = createMapStateToProps(state => ({}));\n\nconst mapDispatchToProps = {\n  fetchOrganizationIdByName: organizationActions.fetchOrganizationIdByName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationForm);\n","import React from \"react\";\nimport { Button, Modal } from \"@patternfly/react-core\";\nimport OrganizationForm from \"../OrganizationForm\";\nimport { FormData } from \"../OrganizationForm/OrganizationForm\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\nimport { AxiosError } from \"axios\";\nimport { FetchStatus } from \"../../store/common\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\n\ninterface StateToProps {\n  organization: OrganizationRepresentation | undefined;\n  error: AxiosError<any> | undefined;\n  status: FetchStatus | undefined;\n}\n\ninterface DispatchToProps {\n  fetchOrganization: (organizationId: string) => any;\n  createOrganization: (organization: OrganizationRepresentation) => any;\n  updateOrganization: (\n    organizationId: string,\n    organization: OrganizationRepresentation\n  ) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps, XmlBuilderRouterProps {\n  organizationId: string | null;\n}\n\ninterface State {\n  saving: boolean;\n  organizationFormData: FormData | null;\n  organizationUUID: string;\n}\n\nclass OrganizationEditModal extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      saving: false,\n      organizationFormData: null,\n      organizationUUID: \"organization-key-uuid\"\n    };\n  }\n\n  componentDidMount() {\n    const { organizationId, fetchOrganization } = this.props;\n    if (organizationId) {\n      fetchOrganization(organizationId);\n    }\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (\n      _prevProps.organization !== this.props.organization &&\n      this.props.organization\n    ) {\n      this.setState({\n        organizationUUID: this.props.organization.id + Math.random()\n      });\n    }\n  }\n\n  handleModalSave = () => {\n    const { organizationFormData } = this.state;\n    const { organizationId } = this.props;\n\n    if (!organizationFormData) {\n      return;\n    }\n\n    this.setState({ saving: true }, () => {\n      if (organizationId) {\n        const { updateOrganization, history } = this.props;\n\n        const payload: any = {\n          name: organizationFormData.name,\n          description: organizationFormData.description,\n          type: \"\",\n          useMasterKeys: false\n        };\n\n        updateOrganization(organizationId, payload).then(() => {\n          history.push(\"/organizations/list\");\n        });\n      } else {\n        const { createOrganization, history } = this.props;\n\n        const payload: any = {\n          name: organizationFormData.name,\n          description: organizationFormData.description,\n          type: \"\",\n          useMasterKeys: false\n        };\n\n        createOrganization(payload).then(() => {\n          history.push(\"/organizations/list\");\n        });\n      }\n    });\n  };\n\n  handleModalClose = () => {\n    const { history } = this.props;\n    history.push(\"/organizations/list\");\n  };\n\n  handleOnFormChange = (isValid: boolean, value: FormData): void => {\n    if (isValid) {\n      this.setState({\n        organizationFormData: value\n      });\n    } else {\n      this.setState({\n        organizationFormData: null\n      });\n    }\n  };\n\n  render() {\n    const { saving, organizationFormData, organizationUUID } = this.state;\n    const { organizationId, organization } = this.props;\n\n    return (\n      <React.Fragment>\n        <Modal\n          title={(organizationId ? \"Editar\" : \"Crear\") + \" organización\"}\n          isOpen={true}\n          isSmall={true}\n          onClose={this.handleModalClose}\n          actions={[\n            <Button\n              key=\"confirm\"\n              variant=\"primary\"\n              onClick={this.handleModalSave}\n              isDisabled={!organizationFormData || saving}\n            >\n              {saving ? \"Guardando\" : \"Guardar\"}\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalClose}>\n              Cancelar\n            </Button>\n          ]}\n        >\n          <OrganizationForm\n            key={organizationUUID}\n            organization={organization}\n            onChange={this.handleOnFormChange}\n          />\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default OrganizationEditModal;\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport OrganizationEditModal from \"./OrganizationEditModal\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  organizationActions,\n  organizationSelectors\n} from \"../../store/organization\";\n\nconst mapStateToProps = createMapStateToProps((state, ownProps: any) => {\n  return {\n    organization: organizationSelectors.selectOrganization(\n      state,\n      ownProps.organizationId\n    ),\n    error: organizationSelectors.selectOrganizationError(\n      state,\n      ownProps.organizationId\n    ),\n    status: organizationSelectors.selectOrganizationFetchStatus(\n      state,\n      ownProps.organizationId\n    )\n  };\n});\n\nconst mapDispatchToProps = {\n  fetchOrganization: organizationActions.fetchOrganization,\n  createOrganization: organizationActions.requestCreateOrganization,\n  updateOrganization: organizationActions.requestUpdateOrganization\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(OrganizationEditModal)\n);\n","import React from \"react\";\nimport ManageOrganizationModal from \"../../SmartComponents/OrganizationEditModal\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\n\ninterface Props extends XmlBuilderRouterProps {}\n\ninterface State {}\n\nexport class PageOrganizationEdit extends React.Component<Props, State> {\n  render() {\n    const { match } = this.props;\n    const organizationId = match.params.organizationId;\n    return <ManageOrganizationModal organizationId={organizationId} />;\n  }\n}\n","import React from \"react\";\nimport { ContextSelector, ContextSelectorItem } from \"@patternfly/react-core\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\n\ninterface StateToProps {\n  ctxOrganization: OrganizationRepresentation | null;\n  ctxOrganizations: OrganizationRepresentation[];\n}\n\ninterface DispatchToProps {\n  selectCtxOrganization: (organization: OrganizationRepresentation) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n  onSelect: (organization: OrganizationRepresentation) => any;\n}\n\ninterface State {\n  isOpen: boolean;\n  searchValue: string;\n  filteredItems: OrganizationRepresentation[];\n}\n\nclass OrganizationContextSelector extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      searchValue: \"\",\n      filteredItems: props.ctxOrganizations\n    };\n  }\n\n  onToggle = (isOpen: any) => {\n    this.setState({\n      // Workaround until <ContextSelector> props are fixed\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  onContextSelect = (event: any, value: any) => {\n    const { ctxOrganizations, selectCtxOrganization, onSelect } = this.props;\n\n    const organization = ctxOrganizations.find(p => p.name === value);\n    if (organization) {\n      this.setState({ isOpen: !this.state.isOpen }, () => {\n        selectCtxOrganization(organization);\n        onSelect(organization);\n      });\n    }\n  };\n\n  onSearchInputChange = (value: string) => {\n    this.setState({ searchValue: value });\n  };\n\n  onSearchButtonClick = (event: any) => {\n    const filtered: OrganizationRepresentation[] =\n      this.state.searchValue.trim() === \"\"\n        ? this.props.ctxOrganizations\n        : this.props.ctxOrganizations.filter(\n            (org: OrganizationRepresentation) =>\n              org.name\n                .toLowerCase()\n                .indexOf(this.state.searchValue.toLowerCase()) !== -1\n          );\n\n    this.setState({ filteredItems: filtered || [] });\n  };\n\n  render() {\n    const { ctxOrganization } = this.props;\n    const { isOpen, searchValue, filteredItems } = this.state;\n    return (\n      <ContextSelector\n        toggleText={ctxOrganization ? ctxOrganization.name : \"\"}\n        onSearchInputChange={this.onSearchInputChange}\n        isOpen={isOpen}\n        searchInputValue={searchValue}\n        onToggle={this.onToggle}\n        onSelect={this.onContextSelect}\n        onSearchButtonClick={this.onSearchButtonClick}\n        screenReaderLabel=\"Selected organization:\"\n      >\n        {filteredItems.map(\n          (item: OrganizationRepresentation, index: number) => (\n            <ContextSelectorItem key={index}>{item.name}</ContextSelectorItem>\n          )\n        )}\n      </ContextSelector>\n    );\n  }\n}\n\nexport default OrganizationContextSelector;\n","import { connect } from \"react-redux\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport { organizationContextSelectors, organizationContextActions } from \"../../store/organizationContext\";\nimport OrganizationContextSelector from \"./OrganizationContextSelector\";\n\nconst mapStateToProps = createMapStateToProps(state => ({\n  ctxOrganization:\n    organizationContextSelectors.selectedOrganization(state) || null,\n  ctxOrganizations: organizationContextSelectors.organizations(state) || []\n}));\n\nconst mapDispatchToProps = {\n  selectCtxOrganization: organizationContextActions.selectOrganizationContext\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(OrganizationContextSelector);\n","import { KeysPageTabs } from \"./KeysPageTabs\";\nimport { withRouter } from \"react-router-dom\";\n\nexport default withRouter(KeysPageTabs);\n","import React from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  Tabs,\n  Tab,\n  FormGroup\n} from \"@patternfly/react-core\";\nimport OrganizationContextSelector from \"../../SmartComponents/OrganizationContextSelector\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\n\ninterface Props extends XmlBuilderRouterProps {\n  activeKey: number;\n}\n\nexport const KeysPageTabs: React.FC<Props> = ({\n  match,\n  history,\n  activeKey,\n  children\n}) => {\n  const handleTabClick = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>,\n    eventKey: number | string\n  ) => {\n    const organizationId = match.params.organizationId;\n    const url = `/organizations/manage/${organizationId}`;\n    if (eventKey === 0) {\n      history.push(url + \"/keys\");\n    } else if (eventKey === 1) {\n      history.push(url + \"/keys/list\");\n    } else if (eventKey === 2) {\n      history.push(url + \"/keys/providers\");\n    }\n  };\n\n  const onOrganizationContextSelect = (\n    organization: OrganizationRepresentation\n  ) => {\n    history.push(`/organizations/manage/${organization.id}/keys`);\n  };\n\n  return (\n    <React.Fragment>\n      <PageSection variant={PageSectionVariants.light}>\n        <div style={{ marginBottom: 20 }}>\n          <div className=\"pf-c-form pf-m-horizontal\">\n            <FormGroup label=\"Organización\" fieldId=\"organizacion\">\n              <OrganizationContextSelector\n                onSelect={onOrganizationContextSelect}\n              />\n            </FormGroup>\n          </div>\n        </div>\n\n        <TextContent>\n          <Text component=\"h1\">Certificados digitales</Text>\n          <Text component=\"small\">\n            Acá podrás configurar los certificados de seguridad que el software\n            usará para firmar los comprobantes de pago electrónicos.\n          </Text>\n        </TextContent>\n        <br />\n        <Tabs isFilled activeKey={activeKey} onSelect={handleTabClick}>\n          <Tab eventKey={0} title=\"Certificados activos\"></Tab>\n          <Tab eventKey={1} title=\"Todos los certificados\"></Tab>\n          <Tab eventKey={2} title=\"Proveeedores de certificados\"></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection>{children}</PageSection>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { AxiosError } from \"axios\";\nimport {\n  IRow,\n  ICell,\n  cellWidth,\n  Table,\n  TableHeader,\n  TableBody,\n  expandable\n} from \"@patternfly/react-table\";\nimport { ClipboardCopy } from \"@patternfly/react-core\";\nimport { FetchStatus } from \"../../store/common\";\nimport {\n  ComponentRepresentation,\n  KeysMetadataRepresentation,\n  KeyMetadataRepresentation\n} from \"../../models/xml-builder\";\nimport {\n  ButtonViewModal,\n  TableSkeleton,\n  TableError,\n  TableEmpty\n} from \"@projectopenubl/xml-builder-react\";\n\ninterface StateToProps {\n  organizationKeys: KeysMetadataRepresentation | undefined;\n  organizationKeysFetchStatus: FetchStatus | undefined;\n  organizationKeysError: AxiosError<any> | undefined;\n  organizationComponents: ComponentRepresentation[];\n  organizationComponentsFetchStatus: FetchStatus | undefined;\n  organizationComponentsError: AxiosError<any> | undefined;\n}\n\ninterface DispatchToProps {\n  fetchOrganizationKeys: (organizationId: string) => any;\n  fetchOrganizationComponents: (organizationId: string) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n  organizationId: string;\n}\n\ninterface State {\n  activeMap: Map<string, KeyMetadataRepresentation>;\n  rows: IRow[];\n  columns: ICell[];\n}\n\nclass KeysActive extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeMap: new Map(),\n      rows: [],\n      columns: [\n        { title: \"Tipo\", transforms: [], cellFormatters: [expandable] },\n        { title: \"Llave\", transforms: [] },\n        { title: \"Proveedor\", transforms: [] },\n        { title: \"Llave pública\", transforms: [cellWidth(\"10\")] },\n        { title: \"Certificado\", transforms: [cellWidth(\"10\")] }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.loadKeysAndComponents();\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    const { activeMap } = this.state;\n    const { organizationKeys, organizationComponents } = this.props;\n\n    if (\n      organizationKeys &&\n      organizationComponents &&\n      organizationComponents.length > 0 &&\n      activeMap.size === 0\n    ) {\n      this.processKeysAndComponents();\n    }\n\n    // Refresh keys and components when route changed\n    const currentOrganizationId = this.props.organizationId;\n    const prevOrganizationId = _prevProps.organizationId;\n    if (prevOrganizationId !== currentOrganizationId) {\n      this.loadKeysAndComponents();\n    }\n  }\n\n  loadKeysAndComponents = () => {\n    const { fetchOrganizationKeys, fetchOrganizationComponents } = this.props;\n\n    this.setState({ activeMap: new Map() }, () => {\n      fetchOrganizationKeys(this.props.organizationId);\n      fetchOrganizationComponents(this.props.organizationId);\n    });\n  };\n\n  processKeysAndComponents = () => {\n    const { organizationKeys, organizationComponents } = this.props;\n    if (organizationKeys && organizationComponents) {\n      const active: any = {};\n\n      for (let i = 0; i < organizationKeys.keys.length; i++) {\n        for (let j = 0; j < organizationComponents.length; j++) {\n          const key: KeyMetadataRepresentation = organizationKeys.keys[i];\n          const component: ComponentRepresentation = organizationComponents[j];\n          if (key.providerId === component.id) {\n            key.provider = organizationComponents[j];\n          }\n        }\n      }\n\n      for (const t in organizationKeys.active) {\n        if (organizationKeys.active[t]) {\n          for (let i = 0; i < organizationKeys.keys.length; i++) {\n            if (organizationKeys.active[t] === organizationKeys.keys[i].kid) {\n              active[t] = organizationKeys.keys[i];\n            }\n          }\n        }\n      }\n\n      const activeMap: Map<string, KeyMetadataRepresentation> = new Map();\n      for (const key in active) {\n        if (active[key]) {\n          activeMap.set(key, active[key]);\n        }\n      }\n\n      this.setState({ activeMap: activeMap }, () => {\n        this.filtersInRowsAndCells();\n      });\n    }\n  };\n\n  filtersInRowsAndCells = (\n    map: Map<string, KeyMetadataRepresentation> = this.state.activeMap\n  ) => {\n    const rows: (IRow | string[])[] = [];\n\n    let index: number = -1;\n    map.forEach((key: KeyMetadataRepresentation) => {\n      index++;\n\n      rows.push(\n        {\n          isOpen: false,\n          cells: [\n            {\n              title: key.type\n            },\n            {\n              title: key.kid\n            },\n            {\n              title: key.provider ? (\n                <span>{key.provider.name}</span>\n              ) : (\n                <small>No provider identified</small>\n              )\n            },\n            {\n              title: (\n                <ButtonViewModal\n                  buttonLabel=\"Ver\"\n                  modalTitle=\"Llave pública\"\n                  modalContent={key.publicKey}\n                />\n              )\n            },\n            {\n              title: (\n                <ButtonViewModal\n                  buttonLabel=\"Ver\"\n                  modalTitle=\"Certificado\"\n                  modalContent={key.certificate}\n                />\n              )\n            }\n          ]\n        },\n        {\n          parent: index * 2,\n          fullWidth: false,\n          cells: [\n            {\n              title: (\n                <React.Fragment>\n                  <div className=\"pf-c-content\">\n                    <dl>\n                      <dt>Llave pública</dt>\n                      <dd>\n                        <ClipboardCopy>{key.publicKey}</ClipboardCopy>\n                      </dd>\n                      <dt>Certificado</dt>\n                      <dd>\n                        <ClipboardCopy>{key.certificate}</ClipboardCopy>\n                      </dd>\n                    </dl>\n                  </div>\n                </React.Fragment>\n              )\n            }\n          ]\n        }\n      );\n    });\n\n    this.setState({\n      rows\n    });\n  };\n\n  // handle\n\n  handleOnTableCollapse = (_event: any, rowKey: number, isOpen: boolean) => {\n    const { rows } = this.state;\n\n    rows[rowKey].isOpen = isOpen;\n    this.setState({ rows });\n  };\n\n  render() {\n    const { columns, rows } = this.state;\n    const {\n      organizationKeysError,\n      organizationComponentsError,\n      organizationKeysFetchStatus,\n      organizationComponentsFetchStatus\n    } = this.props;\n\n    if (\n      organizationKeysFetchStatus !== \"complete\" ||\n      organizationComponentsFetchStatus !== \"complete\"\n    ) {\n      return <TableSkeleton columns={columns} rowSize={5} />;\n    }\n\n    if (organizationKeysError || organizationComponentsError) {\n      const retry = () => {\n        this.loadKeysAndComponents();\n      };\n      return <TableError columns={columns} onRetry={retry} />;\n    }\n\n    if (rows.length === 0) {\n      return <TableEmpty columns={columns} />;\n    }\n\n    return (\n      <React.Fragment>\n        <Table\n          aria-label=\"Keys List Table\"\n          cells={columns}\n          rows={rows}\n          onCollapse={this.handleOnTableCollapse}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default KeysActive;\n","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { KeysMetadataRepresentation } from \"../../models/xml-builder\";\nimport { getOrganizationKeys } from \"../../api/organizations\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\n\ninterface OrganizationKeysActionMeta {\n  organizationId: string;\n}\n\nexport const fetchOrganizationKeysRequest = createAction(\n  \"organizationKeys/fetch/request\"\n)<OrganizationKeysActionMeta>();\nexport const fetchOrganizationKeysSuccess = createAction(\n  \"organizationKeys/fetch/success\"\n)<KeysMetadataRepresentation, OrganizationKeysActionMeta>();\nexport const fetchOrganizationKeysFailure = createAction(\n  \"organizationKeys/fetch/failure\"\n)<AxiosError, OrganizationKeysActionMeta>();\n\nexport const fetchOrganizationKeys = (organizationId: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: OrganizationKeysActionMeta = {\n      organizationId: organizationId\n    };\n\n    dispatch(fetchOrganizationKeysRequest(meta));\n\n    return getOrganizationKeys(organizationId)\n      .then((res: AxiosResponse<KeysMetadataRepresentation>) => {\n        const keysMetadata: KeysMetadataRepresentation = res.data;\n        dispatch(fetchOrganizationKeysSuccess(keysMetadata, meta));\n        return keysMetadata;\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchOrganizationKeysFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n","import { AxiosError } from \"axios\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { KeysMetadataRepresentation } from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchOrganizationKeysRequest,\n  fetchOrganizationKeysSuccess,\n  fetchOrganizationKeysFailure\n} from \"./actions\";\n\nexport const stateKey = \"organizationKeys\";\n\nexport type OrganizationKeyState = Readonly<{\n  byOrganizationId: Map<string, KeysMetadataRepresentation>;\n  errors: Map<string, AxiosError | undefined>;\n  fetchStatus: Map<string, FetchStatus>;\n}>;\n\nexport const defaultState: OrganizationKeyState = {\n  byOrganizationId: new Map(),\n  errors: new Map(),\n  fetchStatus: new Map()\n};\n\nexport type OrganizationKeysAction = ActionType<\n  | typeof fetchOrganizationKeysRequest\n  | typeof fetchOrganizationKeysSuccess\n  | typeof fetchOrganizationKeysFailure\n>;\n\nexport function organizationKeysReducer(\n  state = defaultState,\n  action: OrganizationKeysAction\n): OrganizationKeyState {\n  switch (action.type) {\n    case getType(fetchOrganizationKeysRequest):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.payload.organizationId,\n          \"inProgress\"\n        )\n      };\n    case getType(fetchOrganizationKeysSuccess):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.organizationId,\n          \"complete\"\n        ),\n        byOrganizationId: new Map(state.byOrganizationId).set(\n          action.meta.organizationId,\n          {\n            ...action.payload\n          }\n        ),\n        errors: new Map(state.errors).set(action.meta.organizationId, undefined)\n      };\n    case getType(fetchOrganizationKeysFailure):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.organizationId,\n          \"complete\"\n        ),\n        errors: new Map(state.errors).set(\n          action.meta.organizationId,\n          action.payload\n        )\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const organizationKeysState = (state: RootState) => state[stateKey];\n\n// Fetch migration project\n\nexport const selectOrganizationKeys = (\n  state: RootState,\n  organizationId: string\n) => organizationKeysState(state).byOrganizationId.get(organizationId);\nexport const selectOrganizationKeysFetchStatus = (\n  state: RootState,\n  organizationId: string\n) => organizationKeysState(state).fetchStatus.get(organizationId);\nexport const selectOrganizationKeysError = (\n  state: RootState,\n  organizationId: string\n) => organizationKeysState(state).errors.get(organizationId);\n","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { ComponentRepresentation } from \"../../models/xml-builder\";\nimport { getOrganizationComponents } from \"../../api/organizations\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\n\ninterface OrganizationComponentsActionMeta {\n  organizationId: string;\n}\n\nexport const fetchOrganizationComponentsRequest = createAction(\n  \"organizationComponents/fetch/request\"\n)<OrganizationComponentsActionMeta>();\nexport const fetchOrganizationComponentsSuccess = createAction(\n  \"organizationComponents/fetch/success\"\n)<ComponentRepresentation[], OrganizationComponentsActionMeta>();\nexport const fetchOrganizationComponentsFailure = createAction(\n  \"organizationComponents/fetch/failure\"\n)<AxiosError, OrganizationComponentsActionMeta>();\n\nexport const fetchOrganizationComponents = (organizationId: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: OrganizationComponentsActionMeta = {\n      organizationId: organizationId\n    };\n\n    dispatch(fetchOrganizationComponentsRequest(meta));\n\n    return getOrganizationComponents(organizationId)\n      .then((res: AxiosResponse<ComponentRepresentation[]>) => {\n        dispatch(fetchOrganizationComponentsSuccess(res.data, meta));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchOrganizationComponentsFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n","import { AxiosError } from \"axios\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { ComponentRepresentation } from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchOrganizationComponentsRequest,\n  fetchOrganizationComponentsSuccess,\n  fetchOrganizationComponentsFailure\n} from \"./actions\";\n\nexport const stateKey = \"organizationComponents\";\n\nexport type OrganizationComponentsState = Readonly<{\n  byOrganizationId: Map<string, ComponentRepresentation[]>;\n  errors: Map<string, AxiosError | undefined>;\n  fetchStatus: Map<string, FetchStatus>;\n}>;\n\nexport const defaultState: OrganizationComponentsState = {\n  byOrganizationId: new Map(),\n  errors: new Map(),\n  fetchStatus: new Map()\n};\n\nexport type OrganizationComponentsAction = ActionType<\n  | typeof fetchOrganizationComponentsRequest\n  | typeof fetchOrganizationComponentsSuccess\n  | typeof fetchOrganizationComponentsFailure\n>;\n\nexport function organizationComponentsReducer(\n  state = defaultState,\n  action: OrganizationComponentsAction\n): OrganizationComponentsState {\n  switch (action.type) {\n    case getType(fetchOrganizationComponentsRequest):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.payload.organizationId,\n          \"inProgress\"\n        )\n      };\n    case getType(fetchOrganizationComponentsSuccess):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.organizationId,\n          \"complete\"\n        ),\n        byOrganizationId: new Map(state.byOrganizationId).set(\n          action.meta.organizationId,\n          [\n            ...action.payload\n          ]\n        ),\n        errors: new Map(state.errors).set(action.meta.organizationId, undefined)\n      };\n    case getType(fetchOrganizationComponentsFailure):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.organizationId,\n          \"complete\"\n        ),\n        errors: new Map(state.errors).set(\n          action.meta.organizationId,\n          action.payload\n        )\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const organizationComponentsState = (state: RootState) =>\n  state[stateKey];\n\n// Fetch migration project\n\nexport const selectOrganizationComponents = (\n  state: RootState,\n  organizationId: string\n) => organizationComponentsState(state).byOrganizationId.get(organizationId) || [];\nexport const selectOrganizationComponentsFetchStatus = (\n  state: RootState,\n  organizationId: string\n) => organizationComponentsState(state).fetchStatus.get(organizationId);\nexport const selectOrganizationComponentsError = (\n  state: RootState,\n  organizationId: string\n) => organizationComponentsState(state).errors.get(organizationId);\n","import { connect } from \"react-redux\";\nimport KeysActive from \"./KeysActive\";\n\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  organizationKeysActions,\n  organizationKeysSelectors\n} from \"../../store/organizationKeys\";\nimport {\n  organizationComponentsActions,\n  organizationComponentsSelectors\n} from \"../../store/organizationComponents\";\n\nconst mapStateToProps = createMapStateToProps((state, ownProps: any) => {\n  const organizationId = ownProps.organizationId;\n\n  return {\n    organizationKeys: organizationKeysSelectors.selectOrganizationKeys(\n      state,\n      organizationId\n    ),\n    organizationKeysFetchStatus: organizationKeysSelectors.selectOrganizationKeysFetchStatus(\n      state,\n      organizationId\n    ),\n    organizationKeysError: organizationKeysSelectors.selectOrganizationKeysError(\n      state,\n      organizationId\n    ),\n\n    organizationComponents: organizationComponentsSelectors.selectOrganizationComponents(\n      state,\n      organizationId\n    ),\n    organizationComponentsFetchStatus: organizationComponentsSelectors.selectOrganizationComponentsFetchStatus(\n      state,\n      organizationId\n    ),\n    organizationComponentsError: organizationComponentsSelectors.selectOrganizationComponentsError(\n      state,\n      organizationId\n    )\n  };\n});\n\nconst mapDispatchToProps = {\n  fetchOrganizationKeys: organizationKeysActions.fetchOrganizationKeys,\n  fetchOrganizationComponents:\n    organizationComponentsActions.fetchOrganizationComponents\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeysActive);\n","import React from \"react\";\nimport KeysPageTabs from \"../../KeysPageTabs\";\nimport { XmlBuilderRouterProps } from \"../../../models/routerProps\";\nimport KeysActive from \"../../../SmartComponents/KeysActive\";\n\ninterface Props extends XmlBuilderRouterProps {}\n\ninterface State {}\n\nexport class PageActiveKey extends React.Component<Props, State> {\n  render() {\n    const organizationId = this.props.match.params.organizationId;\n    return (\n      <React.Fragment>\n        <KeysPageTabs activeKey={0}>\n          <KeysActive organizationId={organizationId} />\n        </KeysPageTabs>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { AxiosError } from \"axios\";\nimport {\n  IRow,\n  ICell,\n  cellWidth,\n  Table,\n  TableHeader,\n  TableBody,\n  expandable\n} from \"@patternfly/react-table\";\nimport { ClipboardCopy } from \"@patternfly/react-core\";\nimport {\n  ButtonViewModal,\n  TableSkeleton,\n  TableError,\n  TableEmpty\n} from \"@projectopenubl/xml-builder-react\";\nimport { FetchStatus } from \"../../store/common\";\nimport {\n  ComponentRepresentation,\n  KeysMetadataRepresentation,\n  KeyMetadataRepresentation\n} from \"../../models/xml-builder\";\n\ninterface StateToProps {\n  organizationKeys: KeysMetadataRepresentation | undefined;\n  organizationKeysFetchStatus: FetchStatus | undefined;\n  organizationKeysError: AxiosError<any> | undefined;\n  organizationComponents: ComponentRepresentation[];\n  organizationComponentsFetchStatus: FetchStatus | undefined;\n  organizationComponentsError: AxiosError<any> | undefined;\n}\n\ninterface DispatchToProps {\n  fetchOrganizationKeys: (organizationId: string) => any;\n  fetchOrganizationComponents: (organizationId: string) => any;\n}\n\nexport interface KeyListProps extends StateToProps, DispatchToProps {\n  organizationId: string;\n}\n\ninterface State {\n  activeMap: Map<string, KeyMetadataRepresentation>;\n  rows: IRow[];\n  columns: ICell[];\n}\n\nclass KeyList extends React.Component<KeyListProps, State> {\n  constructor(props: KeyListProps) {\n    super(props);\n    this.state = {\n      activeMap: new Map(),\n      rows: [],\n      columns: [\n        { title: \"Estatus\", transforms: [], cellFormatters: [expandable] },\n        { title: \"Tipo\", transforms: [] },\n        { title: \"Llave\", transforms: [] },\n        { title: \"Prioridad\", transforms: [] },\n        { title: \"Proveedor\", transforms: [] },\n        { title: \"Llave pública\", transforms: [cellWidth(\"10\")] },\n        { title: \"Certificado\", transforms: [cellWidth(\"10\")] }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.loadKeysAndComponents();\n  }\n\n  componentDidUpdate(_prevProps: KeyListProps, prevState: State) {\n    const { activeMap } = this.state;\n    const { organizationKeys, organizationComponents } = this.props;\n\n    if (\n      organizationKeys &&\n      organizationComponents &&\n      organizationComponents.length > 0 &&\n      activeMap.size === 0\n    ) {\n      this.processKeysAndComponents();\n    }\n  }\n\n  loadKeysAndComponents = () => {\n    const { fetchOrganizationKeys, fetchOrganizationComponents } = this.props;\n\n    this.setState({ activeMap: new Map() }, () => {\n      fetchOrganizationKeys(this.props.organizationId);\n      fetchOrganizationComponents(this.props.organizationId);\n    });\n  };\n\n  processKeysAndComponents = () => {\n    const { organizationKeys, organizationComponents } = this.props;\n    if (organizationKeys && organizationComponents) {\n      const active: any = {};\n\n      for (let i = 0; i < organizationKeys.keys.length; i++) {\n        for (let j = 0; j < organizationComponents.length; j++) {\n          const key: KeyMetadataRepresentation = organizationKeys.keys[i];\n          const component: ComponentRepresentation = organizationComponents[j];\n          if (key.providerId === component.id) {\n            key.provider = organizationComponents[j];\n          }\n        }\n      }\n\n      for (const t in organizationKeys.active) {\n        if (organizationKeys.active[t]) {\n          for (let i = 0; i < organizationKeys.keys.length; i++) {\n            if (organizationKeys.active[t] === organizationKeys.keys[i].kid) {\n              active[t] = organizationKeys.keys[i];\n            }\n          }\n        }\n      }\n\n      const activeMap: Map<string, KeyMetadataRepresentation> = new Map();\n      for (const key in active) {\n        if (active[key]) {\n          activeMap.set(key, active[key]);\n        }\n      }\n\n      this.setState({ activeMap: activeMap }, () => {\n        this.filtersInRowsAndCells();\n      });\n    }\n  };\n\n  filtersInRowsAndCells = (\n    map: Map<string, KeyMetadataRepresentation> = this.state.activeMap\n  ) => {\n    const rows: (IRow | string[])[] = [];\n\n    let index: number = -1;\n    map.forEach((key: KeyMetadataRepresentation) => {\n      index++;\n\n      rows.push(\n        {\n          isOpen: false,\n          cells: [\n            {\n              title: key.status\n            },\n            {\n              title: key.type\n            },\n            {\n              title: key.kid\n            },\n            {\n              title: key.providerPriority\n            },\n            {\n              title: key.provider ? (\n                <span>{key.provider.name}</span>\n              ) : (\n                <small>No provider identified</small>\n              )\n            },\n            {\n              title: (\n                <ButtonViewModal\n                  buttonLabel=\"Ver\"\n                  modalTitle=\"Llave pública\"\n                  modalContent={key.publicKey}\n                />\n              )\n            },\n            {\n              title: (\n                <ButtonViewModal\n                  buttonLabel=\"Ver\"\n                  modalTitle=\"Certificado\"\n                  modalContent={key.certificate}\n                />\n              )\n            }\n          ]\n        },\n        {\n          parent: index * 2,\n          fullWidth: false,\n          cells: [\n            {\n              title: (\n                <React.Fragment>\n                  <div className=\"pf-c-content\">\n                    <dl>\n                      <dt>Llave pública</dt>\n                      <dd>\n                        <ClipboardCopy>{key.publicKey}</ClipboardCopy>\n                      </dd>\n                      <dt>Certificado</dt>\n                      <dd>\n                        <ClipboardCopy>{key.certificate}</ClipboardCopy>\n                      </dd>\n                    </dl>\n                  </div>\n                </React.Fragment>\n              )\n            }\n          ]\n        }\n      );\n    });\n\n    this.setState({\n      rows\n    });\n  };\n\n  // handle\n\n  handleOnTableCollapse = (_event: any, rowKey: number, isOpen: boolean) => {\n    const { rows } = this.state;\n\n    rows[rowKey].isOpen = isOpen;\n    this.setState({ rows });\n  };\n\n  render() {\n    const { columns, rows } = this.state;\n    const {\n      organizationKeysError,\n      organizationComponentsError,\n      organizationKeysFetchStatus,\n      organizationComponentsFetchStatus\n    } = this.props;\n\n    if (\n      organizationKeysFetchStatus !== \"complete\" ||\n      organizationComponentsFetchStatus !== \"complete\"\n    ) {\n      return <TableSkeleton columns={columns} rowSize={5} />;\n    }\n\n    if (organizationKeysError || organizationComponentsError) {\n      const retry = () => {\n        this.loadKeysAndComponents();\n      };\n      return <TableError columns={columns} onRetry={retry} />;\n    }\n\n    if (rows.length === 0) {\n      return <TableEmpty columns={columns} />;\n    }\n\n    return (\n      <React.Fragment>\n        <Table\n          aria-label=\"Keys List Table\"\n          cells={columns}\n          rows={rows}\n          onCollapse={this.handleOnTableCollapse}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default KeyList;\n","import { connect } from \"react-redux\";\nimport KeyList from \"./KeyList\";\n\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  organizationKeysActions,\n  organizationKeysSelectors\n} from \"../../store/organizationKeys\";\nimport {\n  organizationComponentsActions,\n  organizationComponentsSelectors\n} from \"../../store/organizationComponents\";\n\nconst mapStateToProps = createMapStateToProps((state, ownProps: any) => {\n  const organizationId = ownProps.organizationId;\n  return {\n    organizationKeys: organizationKeysSelectors.selectOrganizationKeys(\n      state,\n      organizationId\n    ),\n    organizationKeysFetchStatus: organizationKeysSelectors.selectOrganizationKeysFetchStatus(\n      state,\n      organizationId\n    ),\n    organizationKeysError: organizationKeysSelectors.selectOrganizationKeysError(\n      state,\n      organizationId\n    ),\n    organizationComponents: organizationComponentsSelectors.selectOrganizationComponents(\n      state,\n      organizationId\n    ),\n    organizationComponentsFetchStatus: organizationComponentsSelectors.selectOrganizationComponentsFetchStatus(\n      state,\n      organizationId\n    ),\n    organizationComponentsError: organizationComponentsSelectors.selectOrganizationComponentsError(\n      state,\n      organizationId\n    )\n  };\n});\n\nconst mapDispatchToProps = {\n  fetchOrganizationKeys: organizationKeysActions.fetchOrganizationKeys,\n  fetchOrganizationComponents:\n    organizationComponentsActions.fetchOrganizationComponents\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeyList);\n","import React from \"react\";\nimport KeysPageTabs from \"../../KeysPageTabs\";\nimport KeyList from \"../../../SmartComponents/KeyList\";\nimport { XmlBuilderRouterProps } from \"../../../models/routerProps\";\n\ninterface Props extends XmlBuilderRouterProps {}\n\ninterface State {}\n\nexport class PageListKeys extends React.Component<Props, State> {\n  render() {\n    const organizationId = this.props.match.params.organizationId;\n\n    return (\n      <React.Fragment>\n        <KeysPageTabs activeKey={1}>\n          {organizationId && <KeyList organizationId={organizationId} />}\n        </KeysPageTabs>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { AxiosError } from \"axios\";\nimport {\n  IRow,\n  ICell,\n  Table,\n  TableHeader,\n  TableBody,\n  IAction\n} from \"@patternfly/react-table\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Link } from \"react-router-dom\";\nimport { FetchStatus } from \"../../store/common\";\nimport {\n  ComponentRepresentation,\n  ServerInfoRepresentation,\n  ComponentTypeRepresentation\n} from \"../../models/xml-builder\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\nimport { deleteDialogActions } from \"../../store/deleteDialog\";\nimport { TableEmpty, TableError, TableSkeleton } from \"@projectopenubl/xml-builder-react\";\n\ninterface StateToProps {\n  serverInfo: ServerInfoRepresentation | undefined;\n  serverInfoFetchStatus: FetchStatus | undefined;\n  serverInfoError: AxiosError<any> | undefined;\n  organizationComponents: ComponentRepresentation[];\n  organizationComponentsFetchStatus: FetchStatus | undefined;\n  organizationComponentsError: AxiosError<any> | undefined;\n}\n\ninterface DispatchToProps {\n  fetchServerInfo: () => any;\n  fetchOrganizationComponents: (organizationId: string) => any;\n  requestDeleteComponent: (organizationId: string, componentId: string) => any;\n  showDeleteDialog: typeof deleteDialogActions.openModal;\n  closeDeleteDialog: typeof deleteDialogActions.closeModal;\n}\n\ninterface Props extends StateToProps, DispatchToProps, XmlBuilderRouterProps {\n  organizationId: string;\n}\n\ninterface State {\n  rows: IRow[];\n  columns: ICell[];\n  actions: IAction[];\n}\n\nclass KeyProviders extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      rows: [],\n      columns: [\n        { title: \"Nombre\" },\n        { title: \"Kid\" },\n        { title: \"Proveedor\" },\n        { title: \"Prioridad\" }\n      ],\n      actions: [\n        {\n          title: \"Editar\",\n          onClick: (event, rowId) => {\n            const component = this.props.organizationComponents[rowId];\n            this.handleEditar(component);\n          }\n        },\n        {\n          title: \"Eliminar\",\n          onClick: (event, rowId) => {\n            const component = this.props.organizationComponents[rowId];\n            this.handleDelete(component);\n          }\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.loadSystemInfoAndComponents();\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (\n      _prevProps.organizationComponents !== this.props.organizationComponents\n    ) {\n      this.filtersInRowsAndCells();\n    }\n  }\n\n  loadSystemInfoAndComponents = () => {\n    const { fetchServerInfo, fetchOrganizationComponents } = this.props;\n    fetchServerInfo();\n    fetchOrganizationComponents(this.props.organizationId);\n  };\n\n  filtersInRowsAndCells = (\n    components: ComponentRepresentation[] = this.props.organizationComponents\n  ) => {\n    const rows: (IRow | string[])[] = components.map(\n      (component: ComponentRepresentation) => ({\n        cells: [\n          {\n            title: component.name\n          },\n          {\n            title: (\n              <Link key={component.id} to={this.getComponentEditUrl(component)}>\n                {component.id}\n              </Link>\n            )\n          },\n          {\n            title: component.providerId\n          },\n          {\n            title: component.config[\"priority\"][0]\n          }\n        ]\n      })\n    );\n\n    this.setState({\n      rows\n    });\n  };\n\n  // handle\n\n  getComponentEditUrl = (component: ComponentRepresentation) => {\n    const { match } = this.props;\n    return `${match.url}/${component.providerId}/${component.id}`;\n  };\n\n  handleEditar = (component: ComponentRepresentation) => {\n    const { history } = this.props;\n    history.push(this.getComponentEditUrl(component));\n  };\n\n  handleDelete = (component: ComponentRepresentation) => {\n    const {\n      showDeleteDialog,\n      closeDeleteDialog,\n      requestDeleteComponent\n    } = this.props;\n\n    showDeleteDialog({\n      name: component.name,\n      type: \"component\",\n      onDelete: () => {\n        requestDeleteComponent(this.props.organizationId, component.id).then(\n          () => {\n            closeDeleteDialog();\n            this.loadSystemInfoAndComponents();\n          }\n        );\n      },\n      onCancel: () => {\n        closeDeleteDialog();\n      }\n    });\n  };\n\n  // render\n\n  renderTable = () => {\n    const { columns, rows, actions } = this.state;\n    const {\n      serverInfoError,\n      organizationComponentsError,\n      serverInfoFetchStatus,\n      organizationComponentsFetchStatus\n    } = this.props;\n\n    if (\n      serverInfoFetchStatus !== \"complete\" ||\n      organizationComponentsFetchStatus !== \"complete\"\n    ) {\n      return <TableSkeleton columns={columns} rowSize={5} />;\n    }\n\n    if (serverInfoError || organizationComponentsError) {\n      const retry = () => {\n        this.loadSystemInfoAndComponents();\n      };\n      return <TableError columns={columns} onRetry={retry} />;\n    }\n\n    if (rows.length === 0) {\n      return <TableEmpty columns={columns} />;\n    }\n\n    return (\n      <React.Fragment>\n        <Table\n          aria-label=\"Keys List Table\"\n          cells={columns}\n          rows={rows}\n          actions={actions}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    const { serverInfo, match } = this.props;\n\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <Toolbar className=\"pf-l-toolbar pf-u-justify-content-space-between pf-u-mx-xl pf-u-my-md\">\n              <ToolbarGroup>\n                <ToolbarItem className=\"pf-u-mr-xl\"></ToolbarItem>\n              </ToolbarGroup>\n              <ToolbarGroup>\n                {serverInfo && (\n                  <React.Fragment>\n                    {serverInfo.componentTypes.keyProviders\n                      .sort((a, b) => a.id.localeCompare(b.id))\n                      .map((provider: ComponentTypeRepresentation) => (\n                        <ToolbarItem key={provider.id} className=\"pf-u-mx-md\">\n                          <Link to={`${match.url}/${provider.id}`}>\n                            <Button variant=\"link\" icon={<PlusCircleIcon />}>\n                              {provider.id}\n                            </Button>\n                          </Link>\n                        </ToolbarItem>\n                      ))}\n                  </React.Fragment>\n                )}\n              </ToolbarGroup>\n            </Toolbar>\n          </CardHeader>\n        </Card>\n        {this.renderTable()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default KeyProviders;\n","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { ServerInfoRepresentation } from \"../../models/xml-builder\";\nimport { get } from \"../../api/serverInfo\";\nimport { alertFetchEndpoint } from \"../alert/actions\";\n\nexport const fetchServerInfoRequest = createAction(\"serverInfoFetch/request\")();\nexport const fetchServerInfoSuccess = createAction(\"serverInfoFetch/success\")<\n  ServerInfoRepresentation\n>();\nexport const fetchServerInfoFailure = createAction(\"serverInfoFetch/failure\")<\n  AxiosError\n>();\n\nexport const fetchServerInfo = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchServerInfoRequest());\n\n    return get()\n      .then((res: AxiosResponse<ServerInfoRepresentation>) => {\n        dispatch(fetchServerInfoSuccess(res.data));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchServerInfoFailure(err));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n","import ApiClient from \"./apiClient\";\nimport { AxiosPromise } from \"axios\";\nimport {\n  ServerInfoRepresentation\n} from \"../models/xml-builder\";\n\nconst SERVER_INFO_URL = \"/server-info\";\n\nexport const get = (): AxiosPromise<ServerInfoRepresentation> => {\n  return ApiClient.get<ServerInfoRepresentation>(SERVER_INFO_URL);\n};\n","import { AxiosError } from \"axios\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { ServerInfoRepresentation } from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchServerInfoRequest,\n  fetchServerInfoSuccess,\n  fetchServerInfoFailure\n} from \"./actions\";\n\nexport const stateKey = \"serverInfo\";\n\nexport type ServerInfoState = Readonly<{\n  serverInfo: ServerInfoRepresentation | undefined;\n  error: AxiosError<any> | undefined;\n  status: FetchStatus;\n}>;\n\nexport const defaultState: ServerInfoState = {\n  serverInfo: undefined,\n  error: undefined,\n  status: \"none\"\n};\n\nexport type OrganizationKeysAction = ActionType<\n  | typeof fetchServerInfoRequest\n  | typeof fetchServerInfoSuccess\n  | typeof fetchServerInfoFailure\n>;\n\nexport function serverInfoReducer(\n  state = defaultState,\n  action: OrganizationKeysAction\n): ServerInfoState {\n  switch (action.type) {\n    case getType(fetchServerInfoRequest):\n      return {\n        ...state,\n        status: \"inProgress\"\n      };\n    case getType(fetchServerInfoSuccess):\n      return {\n        ...state,\n        status: \"complete\",\n        error: undefined,\n        serverInfo: action.payload\n      };\n    case getType(fetchServerInfoFailure):\n      return {\n        ...state,\n        status: \"complete\",\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const serverInfoState = (state: RootState) => state[stateKey];\n\nexport const selectServerInfo = (state: RootState) =>\n  serverInfoState(state).serverInfo;\nexport const selectServerInfoFetchStatus = (state: RootState) =>\n  serverInfoState(state).status;\nexport const selectServerInfoError = (state: RootState) =>\n  serverInfoState(state).error;\n","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { createAction } from \"typesafe-actions\";\nimport { ComponentRepresentation } from \"../../models/xml-builder\";\nimport {\n  getOrganizationComponent,\n  createOrganizationComponent,\n  updateOrganizationComponent,\n  deleteOrganizationComponent\n} from \"../../api/organizations\";\nimport { alert, alertFetchEndpoint } from \"../alert/actions\";\n\ninterface OrganizationComponentActionMeta {\n  organizationId: string;\n}\n\ninterface ComponentItemActionMeta extends OrganizationComponentActionMeta {\n  componentId: string;\n}\n\nexport const fetchComponentRequest = createAction(\"component/fetch/request\")<\n  ComponentItemActionMeta\n>();\nexport const fetchComponentSuccess = createAction(\"component/fetch/success\")<\n  ComponentRepresentation,\n  ComponentItemActionMeta\n>();\nexport const fetchComponentFailure = createAction(\"component/fetch/failure\")<\n  AxiosError,\n  ComponentItemActionMeta\n>();\n\nexport const createComponentRequest = createAction(\"component/create/request\")<\n  OrganizationComponentActionMeta\n>();\nexport const createComponentSuccess = createAction(\"component/create/success\")<\n  ComponentRepresentation,\n  OrganizationComponentActionMeta\n>();\nexport const createComponentFailure = createAction(\"component/create/failure\")<\n  AxiosError,\n  OrganizationComponentActionMeta\n>();\n\nexport const updateComponentRequest = createAction(\"component/update/request\")<\n  ComponentItemActionMeta\n>();\nexport const updateComponentSuccess = createAction(\"component/update/success\")<\n  ComponentRepresentation,\n  ComponentItemActionMeta\n>();\nexport const updateComponentFailure = createAction(\"component/update/failure\")<\n  AxiosError,\n  ComponentItemActionMeta\n>();\n\nexport const deleteComponentRequest = createAction(\"component/delete/request\")<\n  ComponentItemActionMeta\n>();\nexport const deleteComponentSuccess = createAction(\"component/delete/success\")<\n  string,\n  ComponentItemActionMeta\n>();\nexport const deleteComponentFailure = createAction(\"component/delete/failure\")<\n  AxiosError,\n  ComponentItemActionMeta\n>();\n\nexport const fetchComponent = (organizationId: string, componentId: string) => {\n  return (dispatch: Dispatch) => {\n    const meta: ComponentItemActionMeta = {\n      organizationId: organizationId,\n      componentId: componentId\n    };\n\n    dispatch(fetchComponentRequest(meta));\n\n    return getOrganizationComponent(organizationId, componentId)\n      .then((res: AxiosResponse<ComponentRepresentation>) => {\n        dispatch(fetchComponentSuccess(res.data, meta));\n      })\n      .catch((err: AxiosError) => {\n        dispatch(fetchComponentFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n\nexport const requestCreateComponent = (\n  organizationId: string,\n  component: ComponentRepresentation\n) => {\n  return (dispatch: Dispatch) => {\n    const meta: OrganizationComponentActionMeta = {\n      organizationId: organizationId\n    };\n\n    dispatch(createComponentRequest(meta));\n    return createOrganizationComponent(organizationId, component)\n      .then((res: AxiosResponse<ComponentRepresentation>) => {\n        dispatch(createComponentSuccess(res.data, meta));\n        alert({\n          title: `Creado satisfactoriamente`,\n          variant: \"success\",\n          description: `Componente ${component.name} creado`\n        })(dispatch);\n      })\n      .catch((err: AxiosError) => {\n        dispatch(createComponentFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n\nexport const requestUpdateComponent = (\n  organizationId: string,\n  component: ComponentRepresentation\n) => {\n  return (dispatch: Dispatch) => {\n    const meta: ComponentItemActionMeta = {\n      organizationId: organizationId,\n      componentId: component.id\n    };\n\n    dispatch(updateComponentRequest(meta));\n    return updateOrganizationComponent(organizationId, component)\n      .then((res: AxiosResponse<ComponentRepresentation>) => {\n        dispatch(updateComponentSuccess(res.data, meta));\n        alert({\n          title: `Actualizado satisfactoriamante`,\n          description: `Componente ${component.id} actualizado`,\n          variant: \"success\"\n        })(dispatch);\n      })\n      .catch((err: AxiosError) => {\n        dispatch(updateComponentFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n\nexport const requestDeleteComponent = (\n  organizationId: string,\n  componentId: string\n) => {\n  return (dispatch: Dispatch) => {\n    const meta: ComponentItemActionMeta = {\n      organizationId: organizationId,\n      componentId: componentId\n    };\n\n    dispatch(deleteComponentRequest(meta));\n    return deleteOrganizationComponent(organizationId, componentId)\n      .then((res: AxiosResponse) => {\n        dispatch(deleteComponentSuccess(res.data, meta));\n        alert({\n          title: `Eliminado satisfactoriamente`,\n          description: `Componente ${componentId} eliminado`,\n          variant: \"success\"\n        })(dispatch);\n      })\n      .catch((err: AxiosError) => {\n        dispatch(updateComponentFailure(err, meta));\n        alertFetchEndpoint(err)(dispatch);\n      });\n  };\n};\n","import { AxiosError } from \"axios\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { ComponentRepresentation } from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../common\";\nimport {\n  fetchComponentRequest,\n  fetchComponentSuccess,\n  fetchComponentFailure\n} from \"./actions\";\n\nexport const stateKey = \"component\";\n\nexport type ComponentState = Readonly<{\n  byId: Map<string, ComponentRepresentation>;\n  errors: Map<string, AxiosError | undefined>;\n  fetchStatus: Map<string, FetchStatus>;\n}>;\n\nexport const defaultState: ComponentState = {\n  byId: new Map(),\n  errors: new Map(),\n  fetchStatus: new Map()\n};\n\nexport type ComponentAction = ActionType<\n  | typeof fetchComponentRequest\n  | typeof fetchComponentSuccess\n  | typeof fetchComponentFailure\n>;\n\nexport function componentReducer(\n  state = defaultState,\n  action: ComponentAction\n): ComponentState {\n  switch (action.type) {\n    case getType(fetchComponentRequest):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.payload.componentId,\n          \"inProgress\"\n        )\n      };\n    case getType(fetchComponentSuccess):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.componentId,\n          \"complete\"\n        ),\n        byId: new Map(state.byId).set(action.meta.componentId, {\n          ...action.payload\n        }),\n        errors: new Map(state.errors).set(action.meta.componentId, undefined)\n      };\n    case getType(fetchComponentFailure):\n      return {\n        ...state,\n        fetchStatus: new Map(state.fetchStatus).set(\n          action.meta.componentId,\n          \"complete\"\n        ),\n        errors: new Map(state.errors).set(\n          action.meta.componentId,\n          action.payload\n        )\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from \"../rootReducer\";\nimport { stateKey } from \"./reducer\";\n\nexport const organizationComponentsState = (state: RootState) =>\n  state[stateKey];\n\n//\n\nexport const selectComponent = (state: RootState, componentId: string) =>\n  organizationComponentsState(state).byId.get(componentId);\nexport const selectComponentFetchStatus = (\n  state: RootState,\n  componentId: string\n) => organizationComponentsState(state).fetchStatus.get(componentId);\nexport const selectComponentError = (state: RootState, componentId: string) =>\n  organizationComponentsState(state).errors.get(componentId);\n","import { connect } from \"react-redux\";\nimport KeyProviders from \"./KeyProviders\";\n\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  organizationComponentsActions,\n  organizationComponentsSelectors\n} from \"../../store/organizationComponents\";\nimport { serverInfoSelectors, serverInfoActions } from \"../../store/serverInfo\";\nimport { deleteDialogActions } from \"../../store/deleteDialog\";\nimport { componentActions } from \"../../store/organizationComponent\";\nimport { withRouter } from \"react-router-dom\";\n\nconst mapStateToProps = createMapStateToProps((state, ownProps: any) => {\n  const organizationId = ownProps.organizationId;\n  return {\n    serverInfo: serverInfoSelectors.selectServerInfo(state),\n    serverInfoFetchStatus: serverInfoSelectors.selectServerInfoFetchStatus(\n      state\n    ),\n    serverInfoError: serverInfoSelectors.selectServerInfoError(state),\n\n    organizationComponents: organizationComponentsSelectors.selectOrganizationComponents(\n      state,\n      organizationId\n    ),\n    organizationComponentsFetchStatus: organizationComponentsSelectors.selectOrganizationComponentsFetchStatus(\n      state,\n      organizationId\n    ),\n    organizationComponentsError: organizationComponentsSelectors.selectOrganizationComponentsError(\n      state,\n      organizationId\n    )\n  };\n});\n\nconst mapDispatchToProps = {\n  fetchServerInfo: serverInfoActions.fetchServerInfo,\n  fetchOrganizationComponents:\n    organizationComponentsActions.fetchOrganizationComponents,\n  requestDeleteComponent: componentActions.requestDeleteComponent,\n  showDeleteDialog: deleteDialogActions.openModal,\n  closeDeleteDialog: deleteDialogActions.closeModal\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(KeyProviders)\n);\n","import React from \"react\";\nimport KeysPageTabs from \"../../KeysPageTabs\";\nimport { XmlBuilderRouterProps } from \"../../../models/routerProps\";\nimport KeyProviders from \"../../../SmartComponents/KeyProviders\";\n\ninterface Props extends XmlBuilderRouterProps {}\n\ninterface State {}\n\nexport class PageKeyProviders extends React.Component<Props, State> {\n  render() {\n    const organizationId = this.props.match.params.organizationId;\n\n    return (\n      <React.Fragment>\n        <KeysPageTabs activeKey={2}>\n          <KeyProviders organizationId={organizationId} />\n        </KeysPageTabs>\n      </React.Fragment>\n    );\n  }\n}\n","import PropertySwitch from \"./PropertySwitch\";\n\nexport default PropertySwitch;\n","import React from \"react\";\nimport { Switch } from \"@patternfly/react-core\";\nimport { ConfigPropertyRepresentation } from \"../../models/xml-builder\";\n\nexport interface Props {\n  defaultValue: boolean | string;\n  property: ConfigPropertyRepresentation;\n  onChange: (isChecked: boolean) => any;\n}\n\nexport interface State {\n  isChecked: boolean;\n}\n\nclass PropertySwitch extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isChecked:\n        typeof props.defaultValue === \"string\"\n          ? props.defaultValue === \"true\"\n          : props.defaultValue\n    };\n  }\n\n  handleChange = (isChecked: boolean) => {\n    this.setState({ isChecked });\n    this.props.onChange(isChecked);\n  };\n\n  render() {\n    const { property } = this.props;\n    const { isChecked } = this.state;\n\n    return (\n      <React.Fragment>\n        <Switch\n          id={`${property.type}-${property.name}`}\n          label=\"Activado\"\n          labelOff=\"Desactivado\"\n          isChecked={isChecked}\n          onChange={this.handleChange}\n          aria-label=\"Switch property\"\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PropertySwitch;\n","import PropertySelect from \"./PropertySelect\";\n\nexport default PropertySelect;\n","import React from \"react\";\nimport {\n  Select,\n  SelectVariant,\n  SelectOption,\n  SelectOptionObject,\n  SelectDirection\n} from \"@patternfly/react-core\";\nimport { ConfigPropertyRepresentation } from \"../../models/xml-builder\";\n\nexport interface Props {\n  defaultValue: string;\n  property: ConfigPropertyRepresentation;\n  onChange: (selected: string) => any;\n}\n\nexport interface State {\n  selected: string;\n  isExpanded: boolean;\n}\n\nclass PropertySelect extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      selected: props.defaultValue,\n      isExpanded: false\n    };\n  }\n\n  handleOnToggle = (isExpanded: boolean) => {\n    this.setState({ isExpanded });\n  };\n\n  handleOnSelect = (\n    event: React.MouseEvent | React.ChangeEvent,\n    value: string | SelectOptionObject,\n    isPlaceholder?: boolean\n  ) => {\n    if (isPlaceholder) {\n      this.clearSelection();\n    } else {\n      const selected = typeof value === \"string\" ? value : value.toString();\n      this.setState({\n        selected: selected,\n        isExpanded: false\n      });\n      this.props.onChange(selected);\n    }\n  };\n\n  clearSelection = () => {\n    this.setState({\n      selected: \"\",\n      isExpanded: false\n    });\n  };\n\n  render() {\n    const { property } = this.props;\n    const { selected, isExpanded } = this.state;\n\n    return (\n      <React.Fragment>\n        <Select\n          variant={SelectVariant.single}\n          aria-label={property.label}\n          onToggle={this.handleOnToggle}\n          onSelect={this.handleOnSelect}\n          selections={selected}\n          isExpanded={isExpanded}\n          ariaLabelledBy={property.label}\n          direction={SelectDirection.up}\n        >\n          {property.options.map((option: string, index) => (\n            <SelectOption key={index} value={option} />\n          ))}\n        </Select>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PropertySelect;\n","import PropertyFile from \"./PropertyFile\";\n\nexport default PropertyFile;\n","import React from \"react\";\nimport {\n  InputGroup,\n  TextInput,\n  Split,\n  SplitItem\n} from \"@patternfly/react-core\";\nimport { ImportIcon } from \"@patternfly/react-icons\";\nimport { ConfigPropertyRepresentation } from \"../../models/xml-builder\";\n\nexport interface Props {\n  defaultValue: string;\n  property: ConfigPropertyRepresentation;\n  onChange: (fileData: string) => any;\n}\n\nexport interface State {\n  fileData: string;\n}\n\nclass PropertyFile extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      fileData: props.defaultValue\n    };\n  }\n\n  handleChange = (event: any) => {\n    const inputValue = event.target;\n    const file: File = inputValue.files[0];\n\n    const reader: FileReader = new FileReader();\n    reader.onloadend = () => {\n      const data: any = reader.result;\n      this.setState({ fileData: data });\n      this.props.onChange(data);\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    const { property } = this.props;\n    const { fileData } = this.state;\n\n    return (\n      <React.Fragment>\n        <Split gutter=\"md\">\n          <SplitItem isFilled>\n            <TextInput\n              id={`${property.type}-${property.name}`}\n              name={property.name}\n              type=\"text\"\n              aria-label=\"key input\"\n              value={fileData}\n            />\n          </SplitItem>\n          <SplitItem>\n            <InputGroup>\n              <label>\n                <span className=\"pf-c-button pf-m-secondary\">\n                  Seleccionar archivo <ImportIcon />\n                  <input\n                    type=\"file\"\n                    onChange={this.handleChange}\n                    style={{ display: \"none\" }}\n                  />\n                </span>\n              </label>\n            </InputGroup>\n          </SplitItem>\n        </Split>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PropertyFile;\n","import ProviderForm from \"./ProviderForm\";\n\nexport default ProviderForm;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { Form, FormGroup, TextInput } from \"@patternfly/react-core\";\nimport {\n  ComponentRepresentation,\n  ComponentTypeRepresentation,\n  ConfigPropertyRepresentation\n} from \"../../models/xml-builder\";\nimport PropertySwitch from \"../PropertySwitch\";\nimport PropertySelect from \"../PropertySelect\";\nimport PropertyFile from \"../PropertyFile\";\n\n// export type FormData = {\n//   id: string;\n//   name: string;\n//   config: { [key: string]: string[] };\n// };\n\nexport type FormData = { [key: string]: string | boolean };\n\ninterface Props {\n  provider: ComponentTypeRepresentation | undefined;\n  component: ComponentRepresentation | undefined;\n  onChange: (isValid: boolean, value: FormData) => void;\n}\n\nconst ProviderForm: React.FC<Props> = ({ provider, component, onChange }) => {\n  const schema: any = {\n    id: yup\n      .string()\n      .trim()\n      .required(\"Este dato es requerido.\")\n      .max(250, \"Este campo debe de contener menos de 250 caracteres.\"),\n    name: yup\n      .string()\n      .trim()\n      .required(\"Este dato es requerido.\")\n      .min(3, \"Este campo debe de contener al menos 3 caracteres.\")\n      .max(250, \"Este campo debe de contener menos de 250 caracteres.\")\n  };\n  if (provider) {\n    provider.properties.forEach((property: ConfigPropertyRepresentation) => {\n      switch (property.type) {\n        case \"boolean\":\n          schema[property.name] = yup\n            .boolean()\n            .typeError(\"Este dato debe de ser true/false\")\n            .required(\"Este dato es requerido.\");\n          break;\n        default:\n          schema[property.name] = yup\n            .string()\n            .trim()\n            .required(\"Este dato es requerido.\");\n          break;\n      }\n    });\n  }\n  const validationSchema = yup.object().shape(schema);\n\n  const defaultValues: any = {\n    priority: 0,\n    active: true,\n    enabled: true,\n    keySize: 2048\n  };\n\n  if (component) {\n    defaultValues.id = component.id;\n    defaultValues.name = component.name;\n    Object.keys(component.config).forEach(key => {\n      defaultValues[key] = component.config[key][0];\n    });\n  }\n\n  const { register, errors, triggerValidation, setValue, getValues } = useForm<\n    FormData\n  >({\n    mode: \"onSubmit\",\n    defaultValues,\n    validationSchema\n  });\n\n  // Lyfe cycle\n\n  React.useEffect(() => {\n    if (provider) {\n      provider.properties.forEach((property: ConfigPropertyRepresentation) => {\n        register({ name: property.name });\n      });\n    }\n  }, [register, provider]);\n\n  // Handlers\n\n  const handleOnFormChange = () => {\n    triggerValidation().then((isValid: boolean) => {\n      onChange(isValid, getValues());\n    });\n  };\n\n  // Render\n\n  const renderConfigProperty = (property: ConfigPropertyRepresentation) => {\n    switch (property.type) {\n      case \"String\":\n        return (\n          <TextInput\n            type=\"text\"\n            key={property.name}\n            id={property.name}\n            name={property.name}\n            aria-describedby={property.helpText}\n            ref={register}\n            isValid={!errors[property.name]}\n          />\n        );\n      case \"Password\":\n        return (\n          <TextInput\n            type=\"password\"\n            key={property.name}\n            id={property.name}\n            name={property.name}\n            aria-describedby={property.helpText}\n            ref={register}\n            isValid={!errors[property.name]}\n          />\n        );\n      case \"boolean\":\n        const handleSwitchChange = (isChecked: boolean): void => {\n          setValue(property.name, isChecked);\n        };\n        return (\n          <PropertySwitch\n            property={property}\n            onChange={handleSwitchChange}\n            defaultValue={defaultValues[property.name]}\n          />\n        );\n      case \"List\":\n        const handleSelectChange = (selected: string): void => {\n          setValue(property.name, selected);\n          handleOnFormChange();\n        };\n        return (\n          <PropertySelect\n            property={property}\n            onChange={handleSelectChange}\n            defaultValue={defaultValues[property.name]}\n          />\n        );\n      case \"File\":\n        const handleFileChange = (fileData: string): void => {\n          setValue(property.name, fileData);\n          handleOnFormChange();\n        };\n        return (\n          <PropertyFile\n            property={property}\n            onChange={handleFileChange}\n            defaultValue={defaultValues[property.name]}\n          />\n        );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Form onSubmit={() => {}} onChange={handleOnFormChange} isHorizontal>\n        {component && (\n          <FormGroup\n            label=\"Id\"\n            fieldId=\"id\"\n            isValid={!errors.id}\n            helperTextInvalid={errors.id && errors.id.message}\n          >\n            <TextInput\n              type=\"text\"\n              id=\"id\"\n              name=\"id\"\n              aria-describedby=\"id\"\n              ref={register}\n              isValid={!errors.id}\n              isReadOnly\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label=\"Name\"\n          fieldId=\"name\"\n          helperText=\"Nombre\"\n          isValid={!errors.name}\n          helperTextInvalid={errors.name && errors.name.message}\n        >\n          <TextInput\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n            ref={register}\n            isValid={!errors.name}\n          />\n        </FormGroup>\n        {provider &&\n          provider.properties.map((property: ConfigPropertyRepresentation) => {\n            const propertyError = errors[property.name];\n            return (\n              <FormGroup\n                key={property.name}\n                label={property.label}\n                fieldId={property.name}\n                helperText={property.helpText}\n                isValid={!propertyError}\n                helperTextInvalid={propertyError && propertyError.message}\n              >\n                {renderConfigProperty(property)}\n              </FormGroup>\n            );\n          })}\n      </Form>\n    </React.Fragment>\n  );\n};\n\nexport default ProviderForm;\n","import React from \"react\";\nimport { Button, Modal } from \"@patternfly/react-core\";\nimport {\n  ComponentRepresentation,\n  ComponentTypeRepresentation\n} from \"../../models/xml-builder\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\nimport ProviderForm from \"../../PresentationalComponents/ProviderForm\";\n\ninterface StateToProps {}\n\ninterface DispatchToProps {\n  requestCreateComponent: (\n    organizationId: string,\n    component: ComponentRepresentation\n  ) => any;\n  requestUpdateComponent: (\n    organizationId: string,\n    component: ComponentRepresentation\n  ) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps, XmlBuilderRouterProps {\n  component: ComponentRepresentation | undefined;\n  provider: ComponentTypeRepresentation | undefined;\n}\n\ninterface State {\n  saving: boolean;\n  formData: any | null;\n  componentUUID: string;\n}\n\nclass ProviderManagerModal extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      saving: false,\n      formData: null,\n      componentUUID: \"component-uuid-key\"\n    };\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (_prevProps.component !== this.props.component && this.props.component) {\n      this.setState({\n        componentUUID: this.props.component.id + Math.random()\n      });\n    }\n  }\n\n  getRedirectTo = (): string => {\n    return `/organizations/manage/${this.getOrganizationId()}/keys/providers`;\n  };\n\n  getOrganizationId = (): string => {\n    const { match } = this.props;\n    return match.params.organizationId;\n  };\n\n  getPayload = () => {\n    const { component } = this.props;\n    const { formData } = this.state;\n\n    const { id, name, ...config } = formData;\n    const configPayload: any = {};\n    Object.keys(config).forEach((key: string) => {\n      configPayload[key] = [config[key].toString()];\n    });\n\n    return {\n      ...component,\n      name: name,\n      config: configPayload\n    };\n  };\n\n  create = () => {\n    const { requestCreateComponent, provider, history } = this.props;\n    const payload: any = {\n      ...this.getPayload(),\n      providerId: provider ? provider.id : undefined\n    };\n    requestCreateComponent(this.getOrganizationId(), payload).then(() => {\n      history.push(this.getRedirectTo());\n    });\n  };\n\n  update = () => {\n    const { requestUpdateComponent, history } = this.props;\n    const payload: any = {\n      ...this.getPayload()\n    };\n    requestUpdateComponent(this.getOrganizationId(), payload).then(() => {\n      history.push(this.getRedirectTo());\n    });\n  };\n\n  // Handlers\n\n  handleModalClose = () => {\n    const { history } = this.props;\n    history.push(this.getRedirectTo());\n  };\n\n  handleModalSave = () => {\n    const { component } = this.props;\n    this.setState({ saving: true }, () => {\n      if (component) {\n        this.update();\n      } else {\n        this.create();\n      }\n    });\n  };\n\n  handleOnFormChange = (isValid: boolean, value: any): void => {\n    if (isValid) {\n      this.setState({ formData: value });\n    } else {\n      this.setState({ formData: null });\n    }\n  };\n\n  render() {\n    const { component, provider } = this.props;\n    const { saving, formData, componentUUID } = this.state;\n\n    return (\n      <React.Fragment>\n        <Modal\n          title={(component ? \"Editar\" : \"Crear\") + \" componente\"}\n          isOpen={true}\n          isLarge={true}\n          onClose={this.handleModalClose}\n          actions={[\n            <Button\n              key=\"confirm\"\n              variant=\"primary\"\n              onClick={this.handleModalSave}\n              isDisabled={!formData || saving}\n            >\n              {saving ? \"Guardando\" : \"Guardar\"}\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalClose}>\n              Cancelar\n            </Button>\n          ]}\n        >\n          <ProviderForm\n            key={componentUUID}\n            component={component}\n            provider={provider}\n            onChange={this.handleOnFormChange}\n          />\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProviderManagerModal;\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport ProviderManagerModal from \"./ProviderManagerModal\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport { componentActions } from \"../../store/organizationComponent\";\n\nconst mapStateToProps = createMapStateToProps(state => ({}));\n\nconst mapDispatchToProps = {\n  requestCreateComponent: componentActions.requestCreateComponent,\n  requestUpdateComponent: componentActions.requestUpdateComponent\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(ProviderManagerModal)\n);\n","import React from \"react\";\nimport { AxiosError } from \"axios\";\nimport {\n  ComponentRepresentation,\n  ServerInfoRepresentation,\n  ComponentTypeRepresentation\n} from \"../../models/xml-builder\";\nimport { FetchStatus } from \"../../store/common\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\nimport ManageProviderModal from \"../ProviderManagerModal\";\n\ninterface StateToProps {\n  serverInfo: ServerInfoRepresentation | undefined;\n  serverInfoError: AxiosError<any> | undefined;\n  serverInfoFetchStatus: FetchStatus | undefined;\n  component: ComponentRepresentation | undefined;\n  componentError: AxiosError<any> | undefined;\n  componentFetchStatus: FetchStatus | undefined;\n}\n\ninterface DispatchToProps {\n  fetchServerInfo: () => any;\n  fetchComponent: (organizationId: string, componentId: string) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps, XmlBuilderRouterProps {}\n\ninterface State {}\n\nclass ProviderManager extends React.Component<Props, State> {\n  componentDidMount() {\n    const { fetchComponent, fetchServerInfo } = this.props;\n\n    // fetch server info\n    fetchServerInfo();\n\n    // fetch component\n    const organizationId = this.getOrganizationId();\n    const componentId = this.getComponentId();\n    if (organizationId && componentId) {\n      fetchComponent(organizationId, componentId);\n    }\n  }\n\n  getOrganizationId = (): string => {\n    const { match } = this.props;\n    return match.params.organizationId;\n  };\n\n  getProviderId = (): string => {\n    const { match } = this.props;\n    return match.params.providerId;\n  };\n\n  getComponentId = (): string => {\n    const { match } = this.props;\n    return match.params.componentId;\n  };\n\n  getProvider = (): ComponentTypeRepresentation | undefined => {\n    const { serverInfo } = this.props;\n    if (serverInfo) {\n      const providerId = this.getProviderId();\n\n      const keyProviders = serverInfo.componentTypes.keyProviders;\n      for (let i = 0; i < keyProviders.length; i++) {\n        const provider = keyProviders[i];\n        if (provider.id === providerId) {\n          return provider;\n        }\n      }\n    }\n  };\n\n  render() {\n    const { component } = this.props;\n    const provider = this.getProvider();\n\n    return <ManageProviderModal component={component} provider={provider} />;\n  }\n}\n\nexport default ProviderManager;\n","import { connect } from \"react-redux\";\nimport ProviderManager from \"./ProviderManager\";\n\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  componentActions,\n  componentSelectors\n} from \"../../store/organizationComponent\";\nimport { serverInfoSelectors, serverInfoActions } from \"../../store/serverInfo\";\nimport { withRouter } from \"react-router-dom\";\n\nconst mapStateToProps = createMapStateToProps((state, ownProps: any) => {\n  const componentId = ownProps.match.params.componentId;\n\n  return {\n    component: componentSelectors.selectComponent(state, componentId),\n    componentFetchStatus: componentSelectors.selectComponentFetchStatus(\n      state,\n      componentId\n    ),\n    componentError: componentSelectors.selectComponentError(state, componentId),\n\n    serverInfo: serverInfoSelectors.selectServerInfo(state),\n    serverInfoFetchStatus: serverInfoSelectors.selectServerInfoFetchStatus(\n      state\n    ),\n    serverInfoError: serverInfoSelectors.selectServerInfoError(state)\n  };\n});\n\nconst mapDispatchToProps = {\n  fetchComponent: componentActions.fetchComponent,\n  fetchServerInfo: serverInfoActions.fetchServerInfo\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(ProviderManager)\n);\n","import React from \"react\";\nimport ProviderManager from \"../../../SmartComponents/ProviderManager\";\n\ninterface Props {}\n\ninterface State {}\n\nexport class PageProvider extends React.Component<Props, State> {\n  render() {\n    return (\n      <React.Fragment>\n        <ProviderManager />\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\nimport { PageActiveKey } from \"./PageActiveKey\";\nimport { PageListKeys } from \"./PageListKeys\";\nimport { PageKeyProviders } from \"./PageKeyProviders\";\nimport { PageProvider } from \"./PageProvider\";\n\ninterface Props extends XmlBuilderRouterProps {}\n\nexport const PageOrganizationKeys: React.FC<Props> = ({ match }) => {\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route path={match.path} component={PageActiveKey} exact={true} />\n        <Route\n          path={`${match.path}/list`}\n          component={PageListKeys}\n          exact={false}\n        />\n        <Route\n          path={`${match.path}/providers`}\n          component={PageKeyProviders}\n          exact={true}\n        />\n        <Route\n          path={`${match.path}/providers/:providerId`}\n          component={PageProvider}\n          exact={true}\n        />\n        <Route\n          path={`${match.path}/providers/:providerId/:componentId`}\n          component={PageProvider}\n          exact={true}\n        />\n      </Switch>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\n\ninterface StateToProps {\n  ctxOrganization: OrganizationRepresentation | null;\n  ctxOrganizations: OrganizationRepresentation[];\n}\n\ninterface DispatchToProps {\n  selectCtxOrganization: (organization: OrganizationRepresentation) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps, XmlBuilderRouterProps {\n  path: string;\n  exact?: boolean;\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n}\n\ninterface State {}\n\nclass RouterOrganizationContextSelector extends React.Component<Props, State> {\n  render() {\n    const {\n      component: Component,\n      ctxOrganization,\n      ctxOrganizations,\n      selectCtxOrganization,\n\n      // Select other properties to remove from ...rest\n      location,\n      match,\n      history,\n      ...rest\n    } = this.props;\n\n    const organization = ctxOrganizations.find(\n      p => p.id === this.props.match.params.organizationId\n    );\n\n    if (ctxOrganization) {\n      if (organization != null && organization.id !== ctxOrganization.id) {\n        selectCtxOrganization(organization);\n      }\n    } else {\n      if (organization != null) {\n        selectCtxOrganization(organization);\n      }\n    }\n\n    return <Route {...rest} component={Component} />;\n  }\n}\n\nexport default RouterOrganizationContextSelector;\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport {\n  organizationContextSelectors,\n  organizationContextActions\n} from \"../../store/organizationContext\";\nimport RouterOrganizationContextSelector from \"./OrganizationContextLoader\";\n\nconst mapStateToProps = createMapStateToProps(state => ({\n  ctxOrganization: organizationContextSelectors.selectedOrganization(state) || null,\n  ctxOrganizations: organizationContextSelectors.organizations(state) || []\n}));\n\nconst mapDispatchToProps = {\n  selectCtxOrganization: organizationContextActions.selectOrganizationContext\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(RouterOrganizationContextSelector)\n);\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport { XmlBuilderRouterProps } from \"../../models/routerProps\";\nimport { PageOrganizationEdit } from \"../PageOrganizationEdit\";\nimport { PageOrganizationKeys } from \"../PageOrganizationKeys\";\n// import { PageOrganizationDocuments } from \"../PageOrganizationDocuments\";\nimport RouterOrganizationContextSelector from \"../../SmartComponents/RouterOrganizationContextSelector\";\n\ninterface Props extends XmlBuilderRouterProps {}\n\ninterface State {}\n\nexport class PageContextOrganization extends React.Component<Props, State> {\n  render() {\n    const { match } = this.props;\n    return (\n      <React.Fragment>\n        <Switch>\n          <RouterOrganizationContextSelector\n            path={`${match.path}/edit`}\n            component={PageOrganizationEdit}\n            exact={true}\n          />\n          <RouterOrganizationContextSelector\n            path={`${match.path}/keys`}\n            component={PageOrganizationKeys}\n          />\n          {/* <RouterOrganizationContextSelector\n            path={`${match.path}/documents`}\n            component={PageOrganizationDocuments}\n          /> */}\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./IframeComponent.scss\";\n\ninterface Props {\n  title: string;\n  src: string;\n  height: string;\n  width: string;\n}\n\nexport const IframeComponent: React.FC<Props> = ({\n  title,\n  src,\n  height,\n  width\n}) => {\n  return (\n    <React.Fragment>\n      <iframe\n        title={title}\n        src={src}\n        height={height}\n        width={width}\n        className=\"IframeComponent_fullheight\"\n      />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text\n} from \"@patternfly/react-core\";\nimport { IframeComponent } from \"../IframeComponent\";\n\ninterface Props {}\n\nexport const PageSwaggerUI: React.FC<Props> = () => {\n  // This will work only when it is deployed inside xml-builder Quarkus\n  // const origin = `http://localhost:8080/swagger-ui/`;\n  const origin = `${window.location.origin}/swagger-ui/`;\n  return (\n    <React.Fragment>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component=\"h1\">OpenAPI v3</Text>\n          <Text component=\"small\">\n            Interactúa con todos los endpoints utilizando las herramientas que\n            te ofrecemos.\n          </Text>\n        </TextContent>\n      </PageSection>\n      <PageSection>\n        <IframeComponent\n          title=\"Swagger UI\"\n          src={origin}\n          height=\"100%\"\n          width=\"100%\"\n        />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport {\n  PageHome,\n  PageForbidden403,\n  PageNotFound404,\n  PageServiceUnavailable503\n} from \"@projectopenubl/xml-builder-react\";\nimport RouterOrganizationContextLoader from \"./SmartComponents/RouterOrganizationContextLoader\";\nimport { PageOrganizationList } from \"./PresentationalComponents/PageOrganizationList\";\nimport { PageOrganizationEdit } from \"./PresentationalComponents/PageOrganizationEdit\";\nimport { PageContextOrganization } from \"./PresentationalComponents/PageContextOrganization\";\nimport { PageSwaggerUI } from \"./PresentationalComponents/PageSwaggerUI\";\n\nconst XmlBuilderRoute = (params: any) => {\n  const { component: Component, ...rest } = params;\n  return <RouterOrganizationContextLoader {...rest} component={Component} />;\n};\n\nexport const AppRoutes = () => {\n  return (\n    <Switch>\n      <XmlBuilderRoute\n        path=\"/home\"\n        render={() => (\n          <PageHome\n            welcomeMessage=\"Bienvenido a XML Builder Signer\"\n            buttonAdministrarServidor={\n              <Link\n                to=\"/organizations/list\"\n                className=\"pf-c-button pf-m-primary\"\n              >\n                Administrar\n              </Link>\n            }\n          />\n        )}\n      />\n\n      <XmlBuilderRoute\n        path=\"/organizations/list\"\n        component={PageOrganizationList}\n      />\n      <XmlBuilderRoute\n        path=\"/organizations/create\"\n        component={PageOrganizationEdit}\n      />\n      <XmlBuilderRoute\n        path=\"/organizations/manage/:organizationId\"\n        component={PageContextOrganization}\n      />\n\n      <Route path=\"/swagger-ui\" component={PageSwaggerUI} />\n\n      <Route path=\"/error403\" component={PageForbidden403} />\n      <Route path=\"/error404\" component={PageNotFound404} />\n      <Route path=\"/error503\" component={PageServiceUnavailable503} />\n      <Route path=\"/\" render={() => <Redirect to={\"/home\"} />} />\n    </Switch>\n  );\n};\n","import { Button, Modal, ButtonVariant } from \"@patternfly/react-core\";\nimport React from \"react\";\nimport \"./DeleteDialog.scss\";\nimport { deleteDialogActions } from \"../../store/deleteDialog\";\n\ninterface Props {\n  onDelete: () => void;\n  onCancel: typeof deleteDialogActions.closeModal;\n  isOpen: boolean;\n  isProcessing: boolean;\n  isError: boolean;\n  name: string;\n  type: string;\n}\n\ninterface State {}\n\nclass DeleteDialogBase extends React.Component<Props, State> {\n  public render() {\n    const {\n      type,\n      name,\n      onDelete,\n      onCancel,\n      isOpen,\n      isProcessing,\n      isError\n    } = this.props;\n\n    return (\n      <Modal\n        isSmall={true}\n        title={`Delete ${name}?`}\n        onClose={() => {\n          onCancel();\n        }}\n        isOpen={isOpen}\n        actions={[\n          <Button\n            key=\"confirm\"\n            isDisabled={isProcessing}\n            variant={ButtonVariant.danger}\n            onClick={onDelete}\n          >\n            Delete {`${type}`}\n          </Button>,\n          <Button\n            key=\"cancel\"\n            isDisabled={isProcessing}\n            variant={ButtonVariant.link}\n            onClick={() => {\n              onCancel();\n            }}\n          >\n            Cancel\n          </Button>\n        ]}\n      >\n        {isError\n          ? `Ops! There was a problem while deleting the ${type}.`\n          : `¿Estas seguro de querer eliminar este ${type}? Esta acción eliminará todos los datos asociados a esta ${type} permanentemente.`}\n      </Modal>\n    );\n  }\n}\n\nexport default DeleteDialogBase;\n","import { connect } from \"react-redux\";\nimport DeleteDialogBase from \"./DeleteDialog\";\nimport {\n  deleteDialogSelectors,\n  deleteDialogActions\n} from \"../../store/deleteDialog\";\nimport { createMapStateToProps } from \"../../store/common\";\n\nexport default connect(\n  createMapStateToProps(state => ({\n    onDelete: deleteDialogSelectors.onDelete(state),\n    isOpen: deleteDialogSelectors.isOpen(state),\n    isProcessing: deleteDialogSelectors.isProcessing(state),\n    isError: deleteDialogSelectors.isError(state),\n    name: deleteDialogSelectors.name(state),\n    type: deleteDialogSelectors.type(state)\n  })),\n  {\n    onCancel: deleteDialogActions.closeModal\n  }\n)(DeleteDialogBase);\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Nav, NavItem, NavGroup } from \"@patternfly/react-core\";\nimport { HomeIcon, BookOpenIcon } from \"@patternfly/react-icons\";\nimport { OrganizationRepresentation } from \"../../models/xml-builder\";\n\ninterface Props {\n  ctxOrganizations: OrganizationRepresentation[];\n  ctxOrganization: OrganizationRepresentation | null;\n}\n\ninterface State {}\n\nexport class SidebarNav extends React.Component<Props, State> {\n  render() {\n    const { ctxOrganization, ctxOrganizations } = this.props;\n    const organizationId = ctxOrganization\n      ? ctxOrganization.id\n      : ctxOrganizations.length > 0\n      ? ctxOrganizations[0].id\n      : \"unknown\";\n\n    return (\n      <Nav id=\"nav-primary-simple\" aria-label=\"Nav\" theme=\"dark\">\n        <NavGroup title=\"\">\n          <NavItem>\n            <NavLink to=\"/home\" activeClassName=\"pf-m-current\">\n              <HomeIcon />\n              &nbsp;Home\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink to=\"/swagger-ui\" activeClassName=\"pf-m-current\">\n              <BookOpenIcon />\n              &nbsp;API Docs\n            </NavLink>\n          </NavItem>\n        </NavGroup>\n        <NavGroup title=\"Consola administración\">\n          <NavItem key=\"organizations\">\n            <NavLink to=\"/organizations/list\" activeClassName=\"pf-m-current\">\n              Organizaciones\n            </NavLink>\n          </NavItem>\n          <NavItem key=\"keys\">\n            <NavLink\n              to={`/organizations/manage/${organizationId}/keys`}\n              activeClassName=\"pf-m-current\"\n            >\n              Certificados digitales\n            </NavLink>\n          </NavItem>\n          {/* <NavItem key=\"documents\">\n            <NavLink\n              to={`/organizations/manage/${organizationId}/documents`}\n              activeClassName=\"pf-m-current\"\n            >\n              Comprobantes electrónicos\n            </NavLink>\n          </NavItem> */}\n        </NavGroup>\n      </Nav>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { SidebarNav } from \"./SidebarNav\";\nimport { createMapStateToProps } from \"../../store/common\";\nimport { organizationContextSelectors } from \"../../store/organizationContext\";\n\nconst mapStateToProps = createMapStateToProps(state => ({\n  ctxOrganizations: organizationContextSelectors.organizations(state) || [],\n  ctxOrganization: organizationContextSelectors.selectedOrganization(state) || null\n}));\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarNav);\n","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { AppRoutes } from \"./Routes\";\n\nimport \"./App.css\";\nimport \"./App.scss\";\n\nimport { LayoutBasicProject } from \"@projectopenubl/xml-builder-react\";\n\nimport DeleteMessageDialog from \"./SmartComponents/DeleteDialog\";\nimport SidebarNav from \"./SmartComponents/SidebarNav\";\n\nimport brandImageSrc from \"./logo.png\";\nimport navBrandImageSrc from \"./logo-navbar.svg\";\n\nimport \"@redhat-cloud-services/frontend-components-notifications/index.css\";\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\n\nconst App: React.FC = () => {\n  const NotificationsPortal =\n    frontendComponentsNotifications.NotificationsPortal;\n\n  return (\n    <React.Fragment>\n      <HashRouter>\n        <LayoutBasicProject\n          version={process.env.REACT_APP_VERSION || \"\"}\n          productName=\"XML Builder Signer\"\n          swaggerApiURL=\"https://app.swaggerhub.com/apis-docs/project-openubl/xml-builder-signer\"\n          githubIssuesURL=\"https://github.com/project-openubl/xml-builder/issues\"\n          documentationURL=\"https://project-openubl.gitbook.io/xml-builder/\"\n          githubSourceCodeURL=\"https://github.com/project-openubl/xml-builder\"\n          sidebarNav={<SidebarNav />}\n          brandImageSrc={brandImageSrc}\n          navBrandImageSrc={navBrandImageSrc}\n        >\n          <AppRoutes />\n          <DeleteMessageDialog />\n          <NotificationsPortal />\n        </LayoutBasicProject>\n      </HashRouter>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { StateType } from \"typesafe-actions\";\n\nimport { deleteDialogStateKey, deleteDialogReducer } from \"./deleteDialog\";\nimport {\n  organizationListStateKey,\n  organizationListReducer\n} from \"./organizationList\";\nimport {\n  organizationContextReducer,\n  organizationContextStateKey\n} from \"./organizationContext\";\nimport { organizationStateKey, organizationReducer } from \"./organization\";\nimport {\n  organizationKeysStateKey,\n  organizationKeysReducer\n} from \"./organizationKeys\";\nimport {\n  organizationComponentsStateKey,\n  organizationComponentsReducer\n} from \"./organizationComponents\";\nimport { componentStateKey, componentReducer } from \"./organizationComponent\";\nimport { serverInfoStateKey, serverInfoReducer } from \"./serverInfo\";\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\n\nexport type RootState = StateType<typeof rootReducer>;\n\nexport const rootReducer = combineReducers({\n  notifications: frontendComponentsNotifications.notifications,\n  [deleteDialogStateKey]: deleteDialogReducer,\n  [organizationListStateKey]: organizationListReducer,\n  [organizationContextStateKey]: organizationContextReducer,\n  [organizationStateKey]: organizationReducer,\n  [organizationKeysStateKey]: organizationKeysReducer,\n  [organizationComponentsStateKey]: organizationComponentsReducer,\n  [componentStateKey]: componentReducer,\n  [serverInfoStateKey]: serverInfoReducer\n});\n","import axios from \"axios\";\n\nexport const API_BASE_URL = \"/api\";\n\nexport const initApi = () => {\n  axios.defaults.baseURL = `${API_BASE_URL}`;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport { initApi } from \"./api/apiInit\";\n\ninitApi();\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./rootReducer\";\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(logger, thunk))\n  );\n}\n"],"sourceRoot":""}